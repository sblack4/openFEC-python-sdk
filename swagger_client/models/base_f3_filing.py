# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BaseF3Filing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amended_address': 'str',
        'amended_by': 'int',
        'amendment': 'str',
        'amendment_chain': 'list[int]',
        'beginning_image_number': 'str',
        'candidate_first_name': 'str',
        'candidate_id': 'str',
        'candidate_last_name': 'str',
        'candidate_middle_name': 'str',
        'candidate_name': 'str',
        'candidate_prefix': 'str',
        'candidate_suffix': 'str',
        'cash_on_hand_beginning_period': 'int',
        'city': 'str',
        'committee_id': 'str',
        'committee_name': 'str',
        'coverage_end_date': 'date',
        'coverage_start_date': 'date',
        'csv_url': 'str',
        'district': 'int',
        'document_description': 'str',
        'election_date': 'date',
        'election_state': 'str',
        'f3z1': 'int',
        'fec_file_id': 'str',
        'fec_url': 'str',
        'file_number': 'int',
        'general_election': 'str',
        'is_amended': 'bool',
        'most_recent': 'bool',
        'most_recent_filing': 'int',
        'pdf_url': 'str',
        'prefix': 'str',
        'primary_election': 'str',
        'receipt_date': 'date',
        'report': 'str',
        'report_type': 'str',
        'report_year': 'int',
        'rpt_pgi': 'str',
        'runoff_election': 'str',
        'sign_date': 'date',
        'special_election': 'str',
        'state': 'str',
        'street_1': 'str',
        'street_2': 'str',
        'suffix': 'str',
        'summary_lines': 'str',
        'treasurer_first_name': 'str',
        'treasurer_last_name': 'str',
        'treasurer_middle_name': 'str',
        'treasurer_name': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'amended_address': 'amended_address',
        'amended_by': 'amended_by',
        'amendment': 'amendment',
        'amendment_chain': 'amendment_chain',
        'beginning_image_number': 'beginning_image_number',
        'candidate_first_name': 'candidate_first_name',
        'candidate_id': 'candidate_id',
        'candidate_last_name': 'candidate_last_name',
        'candidate_middle_name': 'candidate_middle_name',
        'candidate_name': 'candidate_name',
        'candidate_prefix': 'candidate_prefix',
        'candidate_suffix': 'candidate_suffix',
        'cash_on_hand_beginning_period': 'cash_on_hand_beginning_period',
        'city': 'city',
        'committee_id': 'committee_id',
        'committee_name': 'committee_name',
        'coverage_end_date': 'coverage_end_date',
        'coverage_start_date': 'coverage_start_date',
        'csv_url': 'csv_url',
        'district': 'district',
        'document_description': 'document_description',
        'election_date': 'election_date',
        'election_state': 'election_state',
        'f3z1': 'f3z1',
        'fec_file_id': 'fec_file_id',
        'fec_url': 'fec_url',
        'file_number': 'file_number',
        'general_election': 'general_election',
        'is_amended': 'is_amended',
        'most_recent': 'most_recent',
        'most_recent_filing': 'most_recent_filing',
        'pdf_url': 'pdf_url',
        'prefix': 'prefix',
        'primary_election': 'primary_election',
        'receipt_date': 'receipt_date',
        'report': 'report',
        'report_type': 'report_type',
        'report_year': 'report_year',
        'rpt_pgi': 'rpt_pgi',
        'runoff_election': 'runoff_election',
        'sign_date': 'sign_date',
        'special_election': 'special_election',
        'state': 'state',
        'street_1': 'street_1',
        'street_2': 'street_2',
        'suffix': 'suffix',
        'summary_lines': 'summary_lines',
        'treasurer_first_name': 'treasurer_first_name',
        'treasurer_last_name': 'treasurer_last_name',
        'treasurer_middle_name': 'treasurer_middle_name',
        'treasurer_name': 'treasurer_name',
        'zip': 'zip'
    }

    def __init__(self, amended_address=None, amended_by=None, amendment=None, amendment_chain=None, beginning_image_number=None, candidate_first_name=None, candidate_id=None, candidate_last_name=None, candidate_middle_name=None, candidate_name=None, candidate_prefix=None, candidate_suffix=None, cash_on_hand_beginning_period=None, city=None, committee_id=None, committee_name=None, coverage_end_date=None, coverage_start_date=None, csv_url=None, district=None, document_description=None, election_date=None, election_state=None, f3z1=None, fec_file_id=None, fec_url=None, file_number=None, general_election=None, is_amended=None, most_recent=None, most_recent_filing=None, pdf_url=None, prefix=None, primary_election=None, receipt_date=None, report=None, report_type=None, report_year=None, rpt_pgi=None, runoff_election=None, sign_date=None, special_election=None, state=None, street_1=None, street_2=None, suffix=None, summary_lines=None, treasurer_first_name=None, treasurer_last_name=None, treasurer_middle_name=None, treasurer_name=None, zip=None):  # noqa: E501
        """BaseF3Filing - a model defined in Swagger"""  # noqa: E501

        self._amended_address = None
        self._amended_by = None
        self._amendment = None
        self._amendment_chain = None
        self._beginning_image_number = None
        self._candidate_first_name = None
        self._candidate_id = None
        self._candidate_last_name = None
        self._candidate_middle_name = None
        self._candidate_name = None
        self._candidate_prefix = None
        self._candidate_suffix = None
        self._cash_on_hand_beginning_period = None
        self._city = None
        self._committee_id = None
        self._committee_name = None
        self._coverage_end_date = None
        self._coverage_start_date = None
        self._csv_url = None
        self._district = None
        self._document_description = None
        self._election_date = None
        self._election_state = None
        self._f3z1 = None
        self._fec_file_id = None
        self._fec_url = None
        self._file_number = None
        self._general_election = None
        self._is_amended = None
        self._most_recent = None
        self._most_recent_filing = None
        self._pdf_url = None
        self._prefix = None
        self._primary_election = None
        self._receipt_date = None
        self._report = None
        self._report_type = None
        self._report_year = None
        self._rpt_pgi = None
        self._runoff_election = None
        self._sign_date = None
        self._special_election = None
        self._state = None
        self._street_1 = None
        self._street_2 = None
        self._suffix = None
        self._summary_lines = None
        self._treasurer_first_name = None
        self._treasurer_last_name = None
        self._treasurer_middle_name = None
        self._treasurer_name = None
        self._zip = None
        self.discriminator = None

        if amended_address is not None:
            self.amended_address = amended_address
        if amended_by is not None:
            self.amended_by = amended_by
        if amendment is not None:
            self.amendment = amendment
        if amendment_chain is not None:
            self.amendment_chain = amendment_chain
        if beginning_image_number is not None:
            self.beginning_image_number = beginning_image_number
        if candidate_first_name is not None:
            self.candidate_first_name = candidate_first_name
        if candidate_id is not None:
            self.candidate_id = candidate_id
        if candidate_last_name is not None:
            self.candidate_last_name = candidate_last_name
        if candidate_middle_name is not None:
            self.candidate_middle_name = candidate_middle_name
        if candidate_name is not None:
            self.candidate_name = candidate_name
        if candidate_prefix is not None:
            self.candidate_prefix = candidate_prefix
        if candidate_suffix is not None:
            self.candidate_suffix = candidate_suffix
        if cash_on_hand_beginning_period is not None:
            self.cash_on_hand_beginning_period = cash_on_hand_beginning_period
        if city is not None:
            self.city = city
        if committee_id is not None:
            self.committee_id = committee_id
        if committee_name is not None:
            self.committee_name = committee_name
        if coverage_end_date is not None:
            self.coverage_end_date = coverage_end_date
        if coverage_start_date is not None:
            self.coverage_start_date = coverage_start_date
        if csv_url is not None:
            self.csv_url = csv_url
        if district is not None:
            self.district = district
        if document_description is not None:
            self.document_description = document_description
        if election_date is not None:
            self.election_date = election_date
        if election_state is not None:
            self.election_state = election_state
        if f3z1 is not None:
            self.f3z1 = f3z1
        if fec_file_id is not None:
            self.fec_file_id = fec_file_id
        if fec_url is not None:
            self.fec_url = fec_url
        if file_number is not None:
            self.file_number = file_number
        if general_election is not None:
            self.general_election = general_election
        if is_amended is not None:
            self.is_amended = is_amended
        if most_recent is not None:
            self.most_recent = most_recent
        if most_recent_filing is not None:
            self.most_recent_filing = most_recent_filing
        if pdf_url is not None:
            self.pdf_url = pdf_url
        if prefix is not None:
            self.prefix = prefix
        if primary_election is not None:
            self.primary_election = primary_election
        if receipt_date is not None:
            self.receipt_date = receipt_date
        if report is not None:
            self.report = report
        if report_type is not None:
            self.report_type = report_type
        if report_year is not None:
            self.report_year = report_year
        if rpt_pgi is not None:
            self.rpt_pgi = rpt_pgi
        if runoff_election is not None:
            self.runoff_election = runoff_election
        if sign_date is not None:
            self.sign_date = sign_date
        if special_election is not None:
            self.special_election = special_election
        if state is not None:
            self.state = state
        if street_1 is not None:
            self.street_1 = street_1
        if street_2 is not None:
            self.street_2 = street_2
        if suffix is not None:
            self.suffix = suffix
        if summary_lines is not None:
            self.summary_lines = summary_lines
        if treasurer_first_name is not None:
            self.treasurer_first_name = treasurer_first_name
        if treasurer_last_name is not None:
            self.treasurer_last_name = treasurer_last_name
        if treasurer_middle_name is not None:
            self.treasurer_middle_name = treasurer_middle_name
        if treasurer_name is not None:
            self.treasurer_name = treasurer_name
        if zip is not None:
            self.zip = zip

    @property
    def amended_address(self):
        """Gets the amended_address of this BaseF3Filing.  # noqa: E501


        :return: The amended_address of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._amended_address

    @amended_address.setter
    def amended_address(self, amended_address):
        """Sets the amended_address of this BaseF3Filing.


        :param amended_address: The amended_address of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._amended_address = amended_address

    @property
    def amended_by(self):
        """Gets the amended_by of this BaseF3Filing.  # noqa: E501


        :return: The amended_by of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._amended_by

    @amended_by.setter
    def amended_by(self, amended_by):
        """Sets the amended_by of this BaseF3Filing.


        :param amended_by: The amended_by of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._amended_by = amended_by

    @property
    def amendment(self):
        """Gets the amendment of this BaseF3Filing.  # noqa: E501


        :return: The amendment of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._amendment

    @amendment.setter
    def amendment(self, amendment):
        """Sets the amendment of this BaseF3Filing.


        :param amendment: The amendment of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._amendment = amendment

    @property
    def amendment_chain(self):
        """Gets the amendment_chain of this BaseF3Filing.  # noqa: E501


        :return: The amendment_chain of this BaseF3Filing.  # noqa: E501
        :rtype: list[int]
        """
        return self._amendment_chain

    @amendment_chain.setter
    def amendment_chain(self, amendment_chain):
        """Sets the amendment_chain of this BaseF3Filing.


        :param amendment_chain: The amendment_chain of this BaseF3Filing.  # noqa: E501
        :type: list[int]
        """

        self._amendment_chain = amendment_chain

    @property
    def beginning_image_number(self):
        """Gets the beginning_image_number of this BaseF3Filing.  # noqa: E501


        :return: The beginning_image_number of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._beginning_image_number

    @beginning_image_number.setter
    def beginning_image_number(self, beginning_image_number):
        """Sets the beginning_image_number of this BaseF3Filing.


        :param beginning_image_number: The beginning_image_number of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._beginning_image_number = beginning_image_number

    @property
    def candidate_first_name(self):
        """Gets the candidate_first_name of this BaseF3Filing.  # noqa: E501


        :return: The candidate_first_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_first_name

    @candidate_first_name.setter
    def candidate_first_name(self, candidate_first_name):
        """Sets the candidate_first_name of this BaseF3Filing.


        :param candidate_first_name: The candidate_first_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_first_name = candidate_first_name

    @property
    def candidate_id(self):
        """Gets the candidate_id of this BaseF3Filing.  # noqa: E501


        :return: The candidate_id of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this BaseF3Filing.


        :param candidate_id: The candidate_id of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_last_name(self):
        """Gets the candidate_last_name of this BaseF3Filing.  # noqa: E501


        :return: The candidate_last_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_last_name

    @candidate_last_name.setter
    def candidate_last_name(self, candidate_last_name):
        """Sets the candidate_last_name of this BaseF3Filing.


        :param candidate_last_name: The candidate_last_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_last_name = candidate_last_name

    @property
    def candidate_middle_name(self):
        """Gets the candidate_middle_name of this BaseF3Filing.  # noqa: E501


        :return: The candidate_middle_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_middle_name

    @candidate_middle_name.setter
    def candidate_middle_name(self, candidate_middle_name):
        """Sets the candidate_middle_name of this BaseF3Filing.


        :param candidate_middle_name: The candidate_middle_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_middle_name = candidate_middle_name

    @property
    def candidate_name(self):
        """Gets the candidate_name of this BaseF3Filing.  # noqa: E501


        :return: The candidate_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this BaseF3Filing.


        :param candidate_name: The candidate_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_name = candidate_name

    @property
    def candidate_prefix(self):
        """Gets the candidate_prefix of this BaseF3Filing.  # noqa: E501


        :return: The candidate_prefix of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_prefix

    @candidate_prefix.setter
    def candidate_prefix(self, candidate_prefix):
        """Sets the candidate_prefix of this BaseF3Filing.


        :param candidate_prefix: The candidate_prefix of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_prefix = candidate_prefix

    @property
    def candidate_suffix(self):
        """Gets the candidate_suffix of this BaseF3Filing.  # noqa: E501


        :return: The candidate_suffix of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._candidate_suffix

    @candidate_suffix.setter
    def candidate_suffix(self, candidate_suffix):
        """Sets the candidate_suffix of this BaseF3Filing.


        :param candidate_suffix: The candidate_suffix of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._candidate_suffix = candidate_suffix

    @property
    def cash_on_hand_beginning_period(self):
        """Gets the cash_on_hand_beginning_period of this BaseF3Filing.  # noqa: E501


        :return: The cash_on_hand_beginning_period of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._cash_on_hand_beginning_period

    @cash_on_hand_beginning_period.setter
    def cash_on_hand_beginning_period(self, cash_on_hand_beginning_period):
        """Sets the cash_on_hand_beginning_period of this BaseF3Filing.


        :param cash_on_hand_beginning_period: The cash_on_hand_beginning_period of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._cash_on_hand_beginning_period = cash_on_hand_beginning_period

    @property
    def city(self):
        """Gets the city of this BaseF3Filing.  # noqa: E501


        :return: The city of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BaseF3Filing.


        :param city: The city of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def committee_id(self):
        """Gets the committee_id of this BaseF3Filing.  # noqa: E501

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.   # noqa: E501

        :return: The committee_id of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this BaseF3Filing.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.   # noqa: E501

        :param committee_id: The committee_id of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this BaseF3Filing.  # noqa: E501

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.  # noqa: E501

        :return: The committee_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this BaseF3Filing.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.  # noqa: E501

        :param committee_name: The committee_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._committee_name = committee_name

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this BaseF3Filing.  # noqa: E501


        :return: The coverage_end_date of this BaseF3Filing.  # noqa: E501
        :rtype: date
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this BaseF3Filing.


        :param coverage_end_date: The coverage_end_date of this BaseF3Filing.  # noqa: E501
        :type: date
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this BaseF3Filing.  # noqa: E501


        :return: The coverage_start_date of this BaseF3Filing.  # noqa: E501
        :rtype: date
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this BaseF3Filing.


        :param coverage_start_date: The coverage_start_date of this BaseF3Filing.  # noqa: E501
        :type: date
        """

        self._coverage_start_date = coverage_start_date

    @property
    def csv_url(self):
        """Gets the csv_url of this BaseF3Filing.  # noqa: E501


        :return: The csv_url of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._csv_url

    @csv_url.setter
    def csv_url(self, csv_url):
        """Sets the csv_url of this BaseF3Filing.


        :param csv_url: The csv_url of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._csv_url = csv_url

    @property
    def district(self):
        """Gets the district of this BaseF3Filing.  # noqa: E501


        :return: The district of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this BaseF3Filing.


        :param district: The district of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._district = district

    @property
    def document_description(self):
        """Gets the document_description of this BaseF3Filing.  # noqa: E501


        :return: The document_description of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._document_description

    @document_description.setter
    def document_description(self, document_description):
        """Sets the document_description of this BaseF3Filing.


        :param document_description: The document_description of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._document_description = document_description

    @property
    def election_date(self):
        """Gets the election_date of this BaseF3Filing.  # noqa: E501


        :return: The election_date of this BaseF3Filing.  # noqa: E501
        :rtype: date
        """
        return self._election_date

    @election_date.setter
    def election_date(self, election_date):
        """Sets the election_date of this BaseF3Filing.


        :param election_date: The election_date of this BaseF3Filing.  # noqa: E501
        :type: date
        """

        self._election_date = election_date

    @property
    def election_state(self):
        """Gets the election_state of this BaseF3Filing.  # noqa: E501


        :return: The election_state of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._election_state

    @election_state.setter
    def election_state(self, election_state):
        """Sets the election_state of this BaseF3Filing.


        :param election_state: The election_state of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._election_state = election_state

    @property
    def f3z1(self):
        """Gets the f3z1 of this BaseF3Filing.  # noqa: E501


        :return: The f3z1 of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._f3z1

    @f3z1.setter
    def f3z1(self, f3z1):
        """Sets the f3z1 of this BaseF3Filing.


        :param f3z1: The f3z1 of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._f3z1 = f3z1

    @property
    def fec_file_id(self):
        """Gets the fec_file_id of this BaseF3Filing.  # noqa: E501


        :return: The fec_file_id of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._fec_file_id

    @fec_file_id.setter
    def fec_file_id(self, fec_file_id):
        """Sets the fec_file_id of this BaseF3Filing.


        :param fec_file_id: The fec_file_id of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._fec_file_id = fec_file_id

    @property
    def fec_url(self):
        """Gets the fec_url of this BaseF3Filing.  # noqa: E501


        :return: The fec_url of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._fec_url

    @fec_url.setter
    def fec_url(self, fec_url):
        """Sets the fec_url of this BaseF3Filing.


        :param fec_url: The fec_url of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._fec_url = fec_url

    @property
    def file_number(self):
        """Gets the file_number of this BaseF3Filing.  # noqa: E501


        :return: The file_number of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._file_number

    @file_number.setter
    def file_number(self, file_number):
        """Sets the file_number of this BaseF3Filing.


        :param file_number: The file_number of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._file_number = file_number

    @property
    def general_election(self):
        """Gets the general_election of this BaseF3Filing.  # noqa: E501


        :return: The general_election of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._general_election

    @general_election.setter
    def general_election(self, general_election):
        """Sets the general_election of this BaseF3Filing.


        :param general_election: The general_election of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._general_election = general_election

    @property
    def is_amended(self):
        """Gets the is_amended of this BaseF3Filing.  # noqa: E501


        :return: The is_amended of this BaseF3Filing.  # noqa: E501
        :rtype: bool
        """
        return self._is_amended

    @is_amended.setter
    def is_amended(self, is_amended):
        """Sets the is_amended of this BaseF3Filing.


        :param is_amended: The is_amended of this BaseF3Filing.  # noqa: E501
        :type: bool
        """

        self._is_amended = is_amended

    @property
    def most_recent(self):
        """Gets the most_recent of this BaseF3Filing.  # noqa: E501


        :return: The most_recent of this BaseF3Filing.  # noqa: E501
        :rtype: bool
        """
        return self._most_recent

    @most_recent.setter
    def most_recent(self, most_recent):
        """Sets the most_recent of this BaseF3Filing.


        :param most_recent: The most_recent of this BaseF3Filing.  # noqa: E501
        :type: bool
        """

        self._most_recent = most_recent

    @property
    def most_recent_filing(self):
        """Gets the most_recent_filing of this BaseF3Filing.  # noqa: E501


        :return: The most_recent_filing of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._most_recent_filing

    @most_recent_filing.setter
    def most_recent_filing(self, most_recent_filing):
        """Sets the most_recent_filing of this BaseF3Filing.


        :param most_recent_filing: The most_recent_filing of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._most_recent_filing = most_recent_filing

    @property
    def pdf_url(self):
        """Gets the pdf_url of this BaseF3Filing.  # noqa: E501


        :return: The pdf_url of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this BaseF3Filing.


        :param pdf_url: The pdf_url of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._pdf_url = pdf_url

    @property
    def prefix(self):
        """Gets the prefix of this BaseF3Filing.  # noqa: E501


        :return: The prefix of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BaseF3Filing.


        :param prefix: The prefix of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def primary_election(self):
        """Gets the primary_election of this BaseF3Filing.  # noqa: E501


        :return: The primary_election of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._primary_election

    @primary_election.setter
    def primary_election(self, primary_election):
        """Sets the primary_election of this BaseF3Filing.


        :param primary_election: The primary_election of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._primary_election = primary_election

    @property
    def receipt_date(self):
        """Gets the receipt_date of this BaseF3Filing.  # noqa: E501


        :return: The receipt_date of this BaseF3Filing.  # noqa: E501
        :rtype: date
        """
        return self._receipt_date

    @receipt_date.setter
    def receipt_date(self, receipt_date):
        """Sets the receipt_date of this BaseF3Filing.


        :param receipt_date: The receipt_date of this BaseF3Filing.  # noqa: E501
        :type: date
        """

        self._receipt_date = receipt_date

    @property
    def report(self):
        """Gets the report of this BaseF3Filing.  # noqa: E501


        :return: The report of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this BaseF3Filing.


        :param report: The report of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._report = report

    @property
    def report_type(self):
        """Gets the report_type of this BaseF3Filing.  # noqa: E501


        :return: The report_type of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this BaseF3Filing.


        :param report_type: The report_type of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def report_year(self):
        """Gets the report_year of this BaseF3Filing.  # noqa: E501


        :return: The report_year of this BaseF3Filing.  # noqa: E501
        :rtype: int
        """
        return self._report_year

    @report_year.setter
    def report_year(self, report_year):
        """Sets the report_year of this BaseF3Filing.


        :param report_year: The report_year of this BaseF3Filing.  # noqa: E501
        :type: int
        """

        self._report_year = report_year

    @property
    def rpt_pgi(self):
        """Gets the rpt_pgi of this BaseF3Filing.  # noqa: E501

        Election type  Convention, Primary, General, Special, Runoff etc.   # noqa: E501

        :return: The rpt_pgi of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._rpt_pgi

    @rpt_pgi.setter
    def rpt_pgi(self, rpt_pgi):
        """Sets the rpt_pgi of this BaseF3Filing.

        Election type  Convention, Primary, General, Special, Runoff etc.   # noqa: E501

        :param rpt_pgi: The rpt_pgi of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._rpt_pgi = rpt_pgi

    @property
    def runoff_election(self):
        """Gets the runoff_election of this BaseF3Filing.  # noqa: E501


        :return: The runoff_election of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._runoff_election

    @runoff_election.setter
    def runoff_election(self, runoff_election):
        """Sets the runoff_election of this BaseF3Filing.


        :param runoff_election: The runoff_election of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._runoff_election = runoff_election

    @property
    def sign_date(self):
        """Gets the sign_date of this BaseF3Filing.  # noqa: E501


        :return: The sign_date of this BaseF3Filing.  # noqa: E501
        :rtype: date
        """
        return self._sign_date

    @sign_date.setter
    def sign_date(self, sign_date):
        """Sets the sign_date of this BaseF3Filing.


        :param sign_date: The sign_date of this BaseF3Filing.  # noqa: E501
        :type: date
        """

        self._sign_date = sign_date

    @property
    def special_election(self):
        """Gets the special_election of this BaseF3Filing.  # noqa: E501


        :return: The special_election of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._special_election

    @special_election.setter
    def special_election(self, special_election):
        """Sets the special_election of this BaseF3Filing.


        :param special_election: The special_election of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._special_election = special_election

    @property
    def state(self):
        """Gets the state of this BaseF3Filing.  # noqa: E501


        :return: The state of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BaseF3Filing.


        :param state: The state of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street_1(self):
        """Gets the street_1 of this BaseF3Filing.  # noqa: E501


        :return: The street_1 of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._street_1

    @street_1.setter
    def street_1(self, street_1):
        """Sets the street_1 of this BaseF3Filing.


        :param street_1: The street_1 of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._street_1 = street_1

    @property
    def street_2(self):
        """Gets the street_2 of this BaseF3Filing.  # noqa: E501


        :return: The street_2 of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._street_2

    @street_2.setter
    def street_2(self, street_2):
        """Sets the street_2 of this BaseF3Filing.


        :param street_2: The street_2 of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._street_2 = street_2

    @property
    def suffix(self):
        """Gets the suffix of this BaseF3Filing.  # noqa: E501


        :return: The suffix of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this BaseF3Filing.


        :param suffix: The suffix of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def summary_lines(self):
        """Gets the summary_lines of this BaseF3Filing.  # noqa: E501


        :return: The summary_lines of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._summary_lines

    @summary_lines.setter
    def summary_lines(self, summary_lines):
        """Sets the summary_lines of this BaseF3Filing.


        :param summary_lines: The summary_lines of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._summary_lines = summary_lines

    @property
    def treasurer_first_name(self):
        """Gets the treasurer_first_name of this BaseF3Filing.  # noqa: E501


        :return: The treasurer_first_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._treasurer_first_name

    @treasurer_first_name.setter
    def treasurer_first_name(self, treasurer_first_name):
        """Sets the treasurer_first_name of this BaseF3Filing.


        :param treasurer_first_name: The treasurer_first_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._treasurer_first_name = treasurer_first_name

    @property
    def treasurer_last_name(self):
        """Gets the treasurer_last_name of this BaseF3Filing.  # noqa: E501


        :return: The treasurer_last_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._treasurer_last_name

    @treasurer_last_name.setter
    def treasurer_last_name(self, treasurer_last_name):
        """Sets the treasurer_last_name of this BaseF3Filing.


        :param treasurer_last_name: The treasurer_last_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._treasurer_last_name = treasurer_last_name

    @property
    def treasurer_middle_name(self):
        """Gets the treasurer_middle_name of this BaseF3Filing.  # noqa: E501


        :return: The treasurer_middle_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._treasurer_middle_name

    @treasurer_middle_name.setter
    def treasurer_middle_name(self, treasurer_middle_name):
        """Sets the treasurer_middle_name of this BaseF3Filing.


        :param treasurer_middle_name: The treasurer_middle_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._treasurer_middle_name = treasurer_middle_name

    @property
    def treasurer_name(self):
        """Gets the treasurer_name of this BaseF3Filing.  # noqa: E501


        :return: The treasurer_name of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._treasurer_name

    @treasurer_name.setter
    def treasurer_name(self, treasurer_name):
        """Sets the treasurer_name of this BaseF3Filing.


        :param treasurer_name: The treasurer_name of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._treasurer_name = treasurer_name

    @property
    def zip(self):
        """Gets the zip of this BaseF3Filing.  # noqa: E501


        :return: The zip of this BaseF3Filing.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this BaseF3Filing.


        :param zip: The zip of this BaseF3Filing.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseF3Filing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseF3Filing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
