# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuditCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_category_id': 'str',
        'primary_category_name': 'str',
        'sub_category_list': 'list[AuditCategoryRelation]'
    }

    attribute_map = {
        'primary_category_id': 'primary_category_id',
        'primary_category_name': 'primary_category_name',
        'sub_category_list': 'sub_category_list'
    }

    def __init__(self, primary_category_id=None, primary_category_name=None, sub_category_list=None):  # noqa: E501
        """AuditCategory - a model defined in Swagger"""  # noqa: E501

        self._primary_category_id = None
        self._primary_category_name = None
        self._sub_category_list = None
        self.discriminator = None

        if primary_category_id is not None:
            self.primary_category_id = primary_category_id
        if primary_category_name is not None:
            self.primary_category_name = primary_category_name
        if sub_category_list is not None:
            self.sub_category_list = sub_category_list

    @property
    def primary_category_id(self):
        """Gets the primary_category_id of this AuditCategory.  # noqa: E501


        :return: The primary_category_id of this AuditCategory.  # noqa: E501
        :rtype: str
        """
        return self._primary_category_id

    @primary_category_id.setter
    def primary_category_id(self, primary_category_id):
        """Sets the primary_category_id of this AuditCategory.


        :param primary_category_id: The primary_category_id of this AuditCategory.  # noqa: E501
        :type: str
        """

        self._primary_category_id = primary_category_id

    @property
    def primary_category_name(self):
        """Gets the primary_category_name of this AuditCategory.  # noqa: E501


        :return: The primary_category_name of this AuditCategory.  # noqa: E501
        :rtype: str
        """
        return self._primary_category_name

    @primary_category_name.setter
    def primary_category_name(self, primary_category_name):
        """Sets the primary_category_name of this AuditCategory.


        :param primary_category_name: The primary_category_name of this AuditCategory.  # noqa: E501
        :type: str
        """

        self._primary_category_name = primary_category_name

    @property
    def sub_category_list(self):
        """Gets the sub_category_list of this AuditCategory.  # noqa: E501


        :return: The sub_category_list of this AuditCategory.  # noqa: E501
        :rtype: list[AuditCategoryRelation]
        """
        return self._sub_category_list

    @sub_category_list.setter
    def sub_category_list(self, sub_category_list):
        """Sets the sub_category_list of this AuditCategory.


        :param sub_category_list: The sub_category_list of this AuditCategory.  # noqa: E501
        :type: list[AuditCategoryRelation]
        """

        self._sub_category_list = sub_category_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
