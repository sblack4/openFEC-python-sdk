# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openfec_sdk.api_client import ApiClient
from openfec_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)
from openfec_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from openfec_sdk.models import committee_reports_page
from openfec_sdk.models import committee_totals_page
from openfec_sdk.models import election_page
from openfec_sdk.models import elections_list_page
from openfec_sdk.models import election_summary
from openfec_sdk.models import entity_receipt_disbursement_totals_page


class FinancialApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __committee_committee_id_reports_get(
            self,
            committee_id,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """committee_committee_id_reports_get  # noqa: E501

             Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee's financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.committee_committee_id_reports_get(committee_id, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                committee_id (str):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                is_amended (bool):  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. . [optional]
                min_total_contributions (str):  Filter for all amounts greater than a value. . [optional]
                max_disbursements_amount (str):  Filter for all amounts less than a value. . [optional]
                candidate_id (str):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                min_debts_owed_amount (str):  Filter for all amounts greater than a value. . [optional]
                min_cash_on_hand_end_period_amount (str):  Filter for all amounts greater than a value. . [optional]
                max_total_contributions (str):  Filter for all amounts less than a value. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                type ([str]): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                beginning_image_number ([str]):  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. . [optional]
                max_debts_owed_expenditures (str):  Filter for all amounts less than a value. . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                max_independent_expenditures (str):  Filter for all amounts less than a value. . [optional]
                max_cash_on_hand_end_period_amount (str):  Filter for all amounts less than a value. . [optional]
                report_type ([str]): Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND . [optional]
                min_independent_expenditures (str):  Filter for all amounts greater than a value. . [optional]
                min_receipts_amount (str):  Filter for all amounts greater than a value. . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["-coverage_end_date"]
                max_receipts_amount (str):  Filter for all amounts less than a value. . [optional]
                year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                min_disbursements_amount (str):  Filter for all amounts greater than a value. . [optional]
                max_party_coordinated_expenditures (str):  Filter for all amounts less than a value. . [optional]
                min_party_coordinated_expenditures (str):  Filter for all amounts greater than a value. . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                committee_reports_page.CommitteeReportsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['committee_id'] = \
                committee_id
            return self.call_with_http_info(**kwargs)

        self.committee_committee_id_reports_get = Endpoint(
            settings={
                'response_type': (committee_reports_page.CommitteeReportsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/committee/{committee_id}/reports/',
                'operation_id': 'committee_committee_id_reports_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'committee_id',
                    'sort_hide_null',
                    'is_amended',
                    'min_total_contributions',
                    'max_disbursements_amount',
                    'candidate_id',
                    'min_debts_owed_amount',
                    'min_cash_on_hand_end_period_amount',
                    'max_total_contributions',
                    'page',
                    'type',
                    'beginning_image_number',
                    'max_debts_owed_expenditures',
                    'cycle',
                    'max_independent_expenditures',
                    'max_cash_on_hand_end_period_amount',
                    'report_type',
                    'min_independent_expenditures',
                    'min_receipts_amount',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'max_receipts_amount',
                    'year',
                    'min_disbursements_amount',
                    'max_party_coordinated_expenditures',
                    'min_party_coordinated_expenditures',
                    'sort_nulls_last',
                ],
                'required': [
                    'api_key',
                    'committee_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'committee_id':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'is_amended':
                        (bool,),
                    'min_total_contributions':
                        (str,),
                    'max_disbursements_amount':
                        (str,),
                    'candidate_id':
                        (str,),
                    'min_debts_owed_amount':
                        (str,),
                    'min_cash_on_hand_end_period_amount':
                        (str,),
                    'max_total_contributions':
                        (str,),
                    'page':
                        (int,),
                    'type':
                        ([str],),
                    'beginning_image_number':
                        ([str],),
                    'max_debts_owed_expenditures':
                        (str,),
                    'cycle':
                        ([int],),
                    'max_independent_expenditures':
                        (str,),
                    'max_cash_on_hand_end_period_amount':
                        (str,),
                    'report_type':
                        ([str],),
                    'min_independent_expenditures':
                        (str,),
                    'min_receipts_amount':
                        (str,),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        ([str], none_type,),
                    'max_receipts_amount':
                        (str,),
                    'year':
                        ([int],),
                    'min_disbursements_amount':
                        (str,),
                    'max_party_coordinated_expenditures':
                        (str,),
                    'min_party_coordinated_expenditures':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'committee_id': 'committee_id',
                    'sort_hide_null': 'sort_hide_null',
                    'is_amended': 'is_amended',
                    'min_total_contributions': 'min_total_contributions',
                    'max_disbursements_amount': 'max_disbursements_amount',
                    'candidate_id': 'candidate_id',
                    'min_debts_owed_amount': 'min_debts_owed_amount',
                    'min_cash_on_hand_end_period_amount': 'min_cash_on_hand_end_period_amount',
                    'max_total_contributions': 'max_total_contributions',
                    'page': 'page',
                    'type': 'type',
                    'beginning_image_number': 'beginning_image_number',
                    'max_debts_owed_expenditures': 'max_debts_owed_expenditures',
                    'cycle': 'cycle',
                    'max_independent_expenditures': 'max_independent_expenditures',
                    'max_cash_on_hand_end_period_amount': 'max_cash_on_hand_end_period_amount',
                    'report_type': 'report_type',
                    'min_independent_expenditures': 'min_independent_expenditures',
                    'min_receipts_amount': 'min_receipts_amount',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'max_receipts_amount': 'max_receipts_amount',
                    'year': 'year',
                    'min_disbursements_amount': 'min_disbursements_amount',
                    'max_party_coordinated_expenditures': 'max_party_coordinated_expenditures',
                    'min_party_coordinated_expenditures': 'min_party_coordinated_expenditures',
                    'sort_nulls_last': 'sort_nulls_last',
                },
                'location_map': {
                    'api_key': 'query',
                    'committee_id': 'path',
                    'sort_hide_null': 'query',
                    'is_amended': 'query',
                    'min_total_contributions': 'query',
                    'max_disbursements_amount': 'query',
                    'candidate_id': 'query',
                    'min_debts_owed_amount': 'query',
                    'min_cash_on_hand_end_period_amount': 'query',
                    'max_total_contributions': 'query',
                    'page': 'query',
                    'type': 'query',
                    'beginning_image_number': 'query',
                    'max_debts_owed_expenditures': 'query',
                    'cycle': 'query',
                    'max_independent_expenditures': 'query',
                    'max_cash_on_hand_end_period_amount': 'query',
                    'report_type': 'query',
                    'min_independent_expenditures': 'query',
                    'min_receipts_amount': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'max_receipts_amount': 'query',
                    'year': 'query',
                    'min_disbursements_amount': 'query',
                    'max_party_coordinated_expenditures': 'query',
                    'min_party_coordinated_expenditures': 'query',
                    'sort_nulls_last': 'query',
                },
                'collection_format_map': {
                    'type': 'multi',
                    'beginning_image_number': 'multi',
                    'cycle': 'multi',
                    'report_type': 'multi',
                    'sort': 'multi',
                    'year': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__committee_committee_id_reports_get
        )

        def __committee_committee_id_totals_get(
            self,
            committee_id,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """committee_committee_id_totals_get  # noqa: E501

             This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  Parameter `full_election` is replaced by `election_full`. Please use `election_full` instead.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.committee_committee_id_totals_get(committee_id, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                committee_id (str):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                designation (str): The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-cycle'
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                type (str): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                committee_totals_page.CommitteeTotalsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['committee_id'] = \
                committee_id
            return self.call_with_http_info(**kwargs)

        self.committee_committee_id_totals_get = Endpoint(
            settings={
                'response_type': (committee_totals_page.CommitteeTotalsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/committee/{committee_id}/totals/',
                'operation_id': 'committee_committee_id_totals_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'committee_id',
                    'sort_hide_null',
                    'designation',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'page',
                    'type',
                    'sort_nulls_last',
                    'cycle',
                ],
                'required': [
                    'api_key',
                    'committee_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'committee_id':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'designation':
                        (str,),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        (str,),
                    'page':
                        (int,),
                    'type':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'cycle':
                        ([int],),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'committee_id': 'committee_id',
                    'sort_hide_null': 'sort_hide_null',
                    'designation': 'designation',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'page': 'page',
                    'type': 'type',
                    'sort_nulls_last': 'sort_nulls_last',
                    'cycle': 'cycle',
                },
                'location_map': {
                    'api_key': 'query',
                    'committee_id': 'path',
                    'sort_hide_null': 'query',
                    'designation': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'page': 'query',
                    'type': 'query',
                    'sort_nulls_last': 'query',
                    'cycle': 'query',
                },
                'collection_format_map': {
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__committee_committee_id_totals_get
        )

        def __elections_get(
            self,
            office,
            cycle,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """elections_get  # noqa: E501

             Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and `house`, `senate` or `presidential`.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the `/candidates` endpoint to see an up to date list of all the candidates that filed to run for a particular seat.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.elections_get(office, cycle, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                office (str): Federal office candidate runs for: H, S or P
                cycle (int):  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                state (str): US state or territory where a candidate runs for office. [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-total_receipts'
                district (str): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                election_full (bool): &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle.. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                election_page.ElectionPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['office'] = \
                office
            kwargs['cycle'] = \
                cycle
            return self.call_with_http_info(**kwargs)

        self.elections_get = Endpoint(
            settings={
                'response_type': (election_page.ElectionPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/elections/',
                'operation_id': 'elections_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'office',
                    'cycle',
                    'sort_hide_null',
                    'state',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'district',
                    'page',
                    'sort_nulls_last',
                    'election_full',
                ],
                'required': [
                    'api_key',
                    'office',
                    'cycle',
                ],
                'nullable': [
                ],
                'enum': [
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('office',): {

                        'HOUSE': 'house',
                        'SENATE': 'senate',
                        'PRESIDENT': 'president'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'office':
                        (str,),
                    'cycle':
                        (int,),
                    'sort_hide_null':
                        (bool,),
                    'state':
                        (str,),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        (str,),
                    'district':
                        (str,),
                    'page':
                        (int,),
                    'sort_nulls_last':
                        (bool,),
                    'election_full':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'office': 'office',
                    'cycle': 'cycle',
                    'sort_hide_null': 'sort_hide_null',
                    'state': 'state',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'district': 'district',
                    'page': 'page',
                    'sort_nulls_last': 'sort_nulls_last',
                    'election_full': 'election_full',
                },
                'location_map': {
                    'api_key': 'query',
                    'office': 'query',
                    'cycle': 'query',
                    'sort_hide_null': 'query',
                    'state': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'district': 'query',
                    'page': 'query',
                    'sort_nulls_last': 'query',
                    'election_full': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__elections_get
        )

        def __elections_search_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """elections_search_get  # noqa: E501

             List elections by cycle, office, state, and district.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.elections_search_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["sort_order","district"]
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                office ([str]): [optional]
                zip ([int]): Zip code. [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                state ([str]): US state or territory where a candidate runs for office. [optional]
                district ([str]): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                cycle ([int]):  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                elections_list_page.ElectionsListPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.elections_search_get = Endpoint(
            settings={
                'response_type': (elections_list_page.ElectionsListPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/elections/search/',
                'operation_id': 'elections_search_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'sort_hide_null',
                    'sort_null_only',
                    'sort',
                    'per_page',
                    'office',
                    'zip',
                    'page',
                    'sort_nulls_last',
                    'state',
                    'district',
                    'cycle',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('office',): {

                        'HOUSE': 'house',
                        'SENATE': 'senate',
                        'PRESIDENT': 'president'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'sort_null_only':
                        (bool,),
                    'sort':
                        ([str], none_type,),
                    'per_page':
                        (int,),
                    'office':
                        ([str],),
                    'zip':
                        ([int],),
                    'page':
                        (int,),
                    'sort_nulls_last':
                        (bool,),
                    'state':
                        ([str],),
                    'district':
                        ([str],),
                    'cycle':
                        ([int],),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'sort_hide_null': 'sort_hide_null',
                    'sort_null_only': 'sort_null_only',
                    'sort': 'sort',
                    'per_page': 'per_page',
                    'office': 'office',
                    'zip': 'zip',
                    'page': 'page',
                    'sort_nulls_last': 'sort_nulls_last',
                    'state': 'state',
                    'district': 'district',
                    'cycle': 'cycle',
                },
                'location_map': {
                    'api_key': 'query',
                    'sort_hide_null': 'query',
                    'sort_null_only': 'query',
                    'sort': 'query',
                    'per_page': 'query',
                    'office': 'query',
                    'zip': 'query',
                    'page': 'query',
                    'sort_nulls_last': 'query',
                    'state': 'query',
                    'district': 'query',
                    'cycle': 'query',
                },
                'collection_format_map': {
                    'sort': 'multi',
                    'office': 'multi',
                    'zip': 'multi',
                    'state': 'multi',
                    'district': 'multi',
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__elections_search_get
        )

        def __elections_summary_get(
            self,
            office,
            cycle,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """elections_summary_get  # noqa: E501

             List elections by cycle, office, state, and district.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.elections_summary_get(office, cycle, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                office (str): Federal office candidate runs for: H, S or P
                cycle (int):  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                district (str): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                state (str): US state or territory where a candidate runs for office. [optional]
                election_full (bool): &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle.. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                election_summary.ElectionSummary
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['office'] = \
                office
            kwargs['cycle'] = \
                cycle
            return self.call_with_http_info(**kwargs)

        self.elections_summary_get = Endpoint(
            settings={
                'response_type': (election_summary.ElectionSummary,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/elections/summary/',
                'operation_id': 'elections_summary_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'office',
                    'cycle',
                    'district',
                    'state',
                    'election_full',
                ],
                'required': [
                    'api_key',
                    'office',
                    'cycle',
                ],
                'nullable': [
                ],
                'enum': [
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('office',): {

                        'HOUSE': 'house',
                        'SENATE': 'senate',
                        'PRESIDENT': 'president'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'office':
                        (str,),
                    'cycle':
                        (int,),
                    'district':
                        (str,),
                    'state':
                        (str,),
                    'election_full':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'office': 'office',
                    'cycle': 'cycle',
                    'district': 'district',
                    'state': 'state',
                    'election_full': 'election_full',
                },
                'location_map': {
                    'api_key': 'query',
                    'office': 'query',
                    'cycle': 'query',
                    'district': 'query',
                    'state': 'query',
                    'election_full': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__elections_summary_get
        )

        def __reports_committee_type_get(
            self,
            committee_type,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """reports_committee_type_get  # noqa: E501

             Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee's financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.reports_committee_type_get(committee_type, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                committee_type (str): House, Senate, presidential, independent expenditure only
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                is_amended (bool):  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. . [optional]
                min_total_contributions (str):  Filter for all amounts greater than a value. . [optional]
                min_cash_on_hand_end_period_amount (str):  Filter for all amounts greater than a value. . [optional]
                max_total_contributions (str):  Filter for all amounts less than a value. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                min_receipt_date (date):  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                type ([str]): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                beginning_image_number ([str]):  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. . [optional]
                max_debts_owed_expenditures (str):  Filter for all amounts less than a value. . [optional]
                max_independent_expenditures (str):  Filter for all amounts less than a value. . [optional]
                report_type ([str]): Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND . [optional]
                min_independent_expenditures (str):  Filter for all amounts greater than a value. . [optional]
                min_receipts_amount (str):  Filter for all amounts greater than a value. . [optional]
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                max_receipts_amount (str):  Filter for all amounts less than a value. . [optional]
                year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                amendment_indicator ([str]): Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. . [optional]
                most_recent (bool):  Report is either new or is the most-recently filed amendment . [optional]
                max_disbursements_amount (str):  Filter for all amounts less than a value. . [optional]
                candidate_id (str):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                committee_id ([str]):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. . [optional]
                min_debts_owed_amount (str):  Filter for all amounts greater than a value. . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                min_party_coordinated_expenditures (str):  Filter for all amounts greater than a value. . [optional]
                max_cash_on_hand_end_period_amount (str):  Filter for all amounts less than a value. . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["-coverage_end_date"]
                max_receipt_date (date):  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                filer_type (str): The method used to file with the FEC, either electronic or on paper.. [optional]
                max_party_coordinated_expenditures (str):  Filter for all amounts less than a value. . [optional]
                min_disbursements_amount (str):  Filter for all amounts greater than a value. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                committee_reports_page.CommitteeReportsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['committee_type'] = \
                committee_type
            return self.call_with_http_info(**kwargs)

        self.reports_committee_type_get = Endpoint(
            settings={
                'response_type': (committee_reports_page.CommitteeReportsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/reports/{committee_type}/',
                'operation_id': 'reports_committee_type_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'committee_type',
                    'sort_hide_null',
                    'is_amended',
                    'min_total_contributions',
                    'min_cash_on_hand_end_period_amount',
                    'max_total_contributions',
                    'page',
                    'min_receipt_date',
                    'type',
                    'beginning_image_number',
                    'max_debts_owed_expenditures',
                    'max_independent_expenditures',
                    'report_type',
                    'min_independent_expenditures',
                    'min_receipts_amount',
                    'per_page',
                    'max_receipts_amount',
                    'year',
                    'sort_nulls_last',
                    'amendment_indicator',
                    'most_recent',
                    'max_disbursements_amount',
                    'candidate_id',
                    'committee_id',
                    'min_debts_owed_amount',
                    'cycle',
                    'min_party_coordinated_expenditures',
                    'max_cash_on_hand_end_period_amount',
                    'sort_null_only',
                    'sort',
                    'max_receipt_date',
                    'filer_type',
                    'max_party_coordinated_expenditures',
                    'min_disbursements_amount',
                ],
                'required': [
                    'api_key',
                    'committee_type',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'committee_type',
                    'amendment_indicator',
                    'filer_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('committee_type',): {

                        'PRESIDENTIAL': 'presidential',
                        'PAC-PARTY': 'pac-party',
                        'HOUSE-SENATE': 'house-senate',
                        'IE-ONLY': 'ie-only'
                    },
                    ('amendment_indicator',): {

                        'EMPTY': '',
                        'N': 'N',
                        'A': 'A',
                        'T': 'T',
                        'C': 'C',
                        'M': 'M',
                        'S': 'S'
                    },
                    ('filer_type',): {

                        'E-FILE': 'e-file',
                        'PAPER': 'paper'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'committee_type':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'is_amended':
                        (bool,),
                    'min_total_contributions':
                        (str,),
                    'min_cash_on_hand_end_period_amount':
                        (str,),
                    'max_total_contributions':
                        (str,),
                    'page':
                        (int,),
                    'min_receipt_date':
                        (date,),
                    'type':
                        ([str],),
                    'beginning_image_number':
                        ([str],),
                    'max_debts_owed_expenditures':
                        (str,),
                    'max_independent_expenditures':
                        (str,),
                    'report_type':
                        ([str],),
                    'min_independent_expenditures':
                        (str,),
                    'min_receipts_amount':
                        (str,),
                    'per_page':
                        (int,),
                    'max_receipts_amount':
                        (str,),
                    'year':
                        ([int],),
                    'sort_nulls_last':
                        (bool,),
                    'amendment_indicator':
                        ([str],),
                    'most_recent':
                        (bool,),
                    'max_disbursements_amount':
                        (str,),
                    'candidate_id':
                        (str,),
                    'committee_id':
                        ([str],),
                    'min_debts_owed_amount':
                        (str,),
                    'cycle':
                        ([int],),
                    'min_party_coordinated_expenditures':
                        (str,),
                    'max_cash_on_hand_end_period_amount':
                        (str,),
                    'sort_null_only':
                        (bool,),
                    'sort':
                        ([str], none_type,),
                    'max_receipt_date':
                        (date,),
                    'filer_type':
                        (str,),
                    'max_party_coordinated_expenditures':
                        (str,),
                    'min_disbursements_amount':
                        (str,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'committee_type': 'committee_type',
                    'sort_hide_null': 'sort_hide_null',
                    'is_amended': 'is_amended',
                    'min_total_contributions': 'min_total_contributions',
                    'min_cash_on_hand_end_period_amount': 'min_cash_on_hand_end_period_amount',
                    'max_total_contributions': 'max_total_contributions',
                    'page': 'page',
                    'min_receipt_date': 'min_receipt_date',
                    'type': 'type',
                    'beginning_image_number': 'beginning_image_number',
                    'max_debts_owed_expenditures': 'max_debts_owed_expenditures',
                    'max_independent_expenditures': 'max_independent_expenditures',
                    'report_type': 'report_type',
                    'min_independent_expenditures': 'min_independent_expenditures',
                    'min_receipts_amount': 'min_receipts_amount',
                    'per_page': 'per_page',
                    'max_receipts_amount': 'max_receipts_amount',
                    'year': 'year',
                    'sort_nulls_last': 'sort_nulls_last',
                    'amendment_indicator': 'amendment_indicator',
                    'most_recent': 'most_recent',
                    'max_disbursements_amount': 'max_disbursements_amount',
                    'candidate_id': 'candidate_id',
                    'committee_id': 'committee_id',
                    'min_debts_owed_amount': 'min_debts_owed_amount',
                    'cycle': 'cycle',
                    'min_party_coordinated_expenditures': 'min_party_coordinated_expenditures',
                    'max_cash_on_hand_end_period_amount': 'max_cash_on_hand_end_period_amount',
                    'sort_null_only': 'sort_null_only',
                    'sort': 'sort',
                    'max_receipt_date': 'max_receipt_date',
                    'filer_type': 'filer_type',
                    'max_party_coordinated_expenditures': 'max_party_coordinated_expenditures',
                    'min_disbursements_amount': 'min_disbursements_amount',
                },
                'location_map': {
                    'api_key': 'query',
                    'committee_type': 'path',
                    'sort_hide_null': 'query',
                    'is_amended': 'query',
                    'min_total_contributions': 'query',
                    'min_cash_on_hand_end_period_amount': 'query',
                    'max_total_contributions': 'query',
                    'page': 'query',
                    'min_receipt_date': 'query',
                    'type': 'query',
                    'beginning_image_number': 'query',
                    'max_debts_owed_expenditures': 'query',
                    'max_independent_expenditures': 'query',
                    'report_type': 'query',
                    'min_independent_expenditures': 'query',
                    'min_receipts_amount': 'query',
                    'per_page': 'query',
                    'max_receipts_amount': 'query',
                    'year': 'query',
                    'sort_nulls_last': 'query',
                    'amendment_indicator': 'query',
                    'most_recent': 'query',
                    'max_disbursements_amount': 'query',
                    'candidate_id': 'query',
                    'committee_id': 'query',
                    'min_debts_owed_amount': 'query',
                    'cycle': 'query',
                    'min_party_coordinated_expenditures': 'query',
                    'max_cash_on_hand_end_period_amount': 'query',
                    'sort_null_only': 'query',
                    'sort': 'query',
                    'max_receipt_date': 'query',
                    'filer_type': 'query',
                    'max_party_coordinated_expenditures': 'query',
                    'min_disbursements_amount': 'query',
                },
                'collection_format_map': {
                    'type': 'multi',
                    'beginning_image_number': 'multi',
                    'report_type': 'multi',
                    'year': 'multi',
                    'amendment_indicator': 'multi',
                    'committee_id': 'multi',
                    'cycle': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_committee_type_get
        )

        def __totals_by_entity_get(
            self,
            cycle,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """totals_by_entity_get  # noqa: E501

             Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.totals_by_entity_get(cycle, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                cycle (int):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of 'end_date'
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                entity_receipt_disbursement_totals_page.EntityReceiptDisbursementTotalsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['cycle'] = \
                cycle
            return self.call_with_http_info(**kwargs)

        self.totals_by_entity_get = Endpoint(
            settings={
                'response_type': (entity_receipt_disbursement_totals_page.EntityReceiptDisbursementTotalsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/totals/by_entity/',
                'operation_id': 'totals_by_entity_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'cycle',
                    'sort_hide_null',
                    'sort_null_only',
                    'per_page',
                    'sort_nulls_last',
                    'sort',
                    'page',
                ],
                'required': [
                    'api_key',
                    'cycle',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'cycle':
                        (int,),
                    'sort_hide_null':
                        (bool,),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort_nulls_last':
                        (bool,),
                    'sort':
                        (str,),
                    'page':
                        (int,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'cycle': 'cycle',
                    'sort_hide_null': 'sort_hide_null',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort_nulls_last': 'sort_nulls_last',
                    'sort': 'sort',
                    'page': 'page',
                },
                'location_map': {
                    'api_key': 'query',
                    'cycle': 'query',
                    'sort_hide_null': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort_nulls_last': 'query',
                    'sort': 'query',
                    'page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__totals_by_entity_get
        )

        def __totals_committee_type_get(
            self,
            committee_type,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """totals_committee_type_get  # noqa: E501

             This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  Parameter `full_election` is replaced by `election_full`. Please use `election_full` instead.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.totals_committee_type_get(committee_type, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                committee_type (str): House, Senate, presidential, independent expenditure only
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-cycle'
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                committee_id (str):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                committee_type_full (str): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                committee_designation_full (str): The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                committee_totals_page.CommitteeTotalsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['committee_type'] = \
                committee_type
            return self.call_with_http_info(**kwargs)

        self.totals_committee_type_get = Endpoint(
            settings={
                'response_type': (committee_totals_page.CommitteeTotalsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/totals/{committee_type}/',
                'operation_id': 'totals_committee_type_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'committee_type',
                    'sort_hide_null',
                    'sort_null_only',
                    'sort',
                    'per_page',
                    'committee_id',
                    'sort_nulls_last',
                    'page',
                    'committee_type_full',
                    'committee_designation_full',
                    'cycle',
                ],
                'required': [
                    'api_key',
                    'committee_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'committee_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('committee_type',): {

                        'PRESIDENTIAL': 'presidential',
                        'PAC': 'pac',
                        'PARTY': 'party',
                        'PAC-PARTY': 'pac-party',
                        'HOUSE-SENATE': 'house-senate',
                        'IE-ONLY': 'ie-only'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'committee_type':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'sort_null_only':
                        (bool,),
                    'sort':
                        (str,),
                    'per_page':
                        (int,),
                    'committee_id':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'page':
                        (int,),
                    'committee_type_full':
                        (str,),
                    'committee_designation_full':
                        (str,),
                    'cycle':
                        ([int],),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'committee_type': 'committee_type',
                    'sort_hide_null': 'sort_hide_null',
                    'sort_null_only': 'sort_null_only',
                    'sort': 'sort',
                    'per_page': 'per_page',
                    'committee_id': 'committee_id',
                    'sort_nulls_last': 'sort_nulls_last',
                    'page': 'page',
                    'committee_type_full': 'committee_type_full',
                    'committee_designation_full': 'committee_designation_full',
                    'cycle': 'cycle',
                },
                'location_map': {
                    'api_key': 'query',
                    'committee_type': 'path',
                    'sort_hide_null': 'query',
                    'sort_null_only': 'query',
                    'sort': 'query',
                    'per_page': 'query',
                    'committee_id': 'query',
                    'sort_nulls_last': 'query',
                    'page': 'query',
                    'committee_type_full': 'query',
                    'committee_designation_full': 'query',
                    'cycle': 'query',
                },
                'collection_format_map': {
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__totals_committee_type_get
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    'Invalid host index. Must be 0 <= index < %s' %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    ' to method `%s`' %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    'Value may not be None for non-nullable parameter `%s`'
                    ' when calling `%s`' %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    'Missing the required parameter `%s` when calling '
                    '`%s`' % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
