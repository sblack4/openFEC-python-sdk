# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openfec_sdk.api_client import ApiClient
from openfec_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)
from openfec_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from openfec_sdk.models import electioneering_by_candidate_page
from openfec_sdk.models import electioneering_page
from openfec_sdk.models import ec_totals_by_candidate_page


class ElectioneeringApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __committee_committee_id_electioneering_by_candidate_get(
            self,
            committee_id,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """committee_committee_id_electioneering_by_candidate_get  # noqa: E501

            Electioneering costs aggregated by candidate  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.committee_committee_id_electioneering_by_candidate_get(committee_id, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                committee_id (str):
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                election_full (bool): &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle.. [optional] if omitted the server will use the default value of True
                sort (str, none_type): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of 'null'
                candidate_id ([str]):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                state (str): US state or territory where a candidate runs for office. [optional]
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                district (str): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                office (str): Federal office candidate runs for: H, S or P. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                electioneering_by_candidate_page.ElectioneeringByCandidatePage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['committee_id'] = \
                committee_id
            return self.call_with_http_info(**kwargs)

        self.committee_committee_id_electioneering_by_candidate_get = Endpoint(
            settings={
                'response_type': (electioneering_by_candidate_page.ElectioneeringByCandidatePage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/committee/{committee_id}/electioneering/by_candidate/',
                'operation_id': 'committee_committee_id_electioneering_by_candidate_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'committee_id',
                    'election_full',
                    'sort',
                    'candidate_id',
                    'state',
                    'sort_hide_null',
                    'per_page',
                    'district',
                    'sort_nulls_last',
                    'cycle',
                    'page',
                    'sort_null_only',
                    'office',
                ],
                'required': [
                    'api_key',
                    'committee_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('office',): {

                        'HOUSE': 'house',
                        'SENATE': 'senate',
                        'PRESIDENT': 'president'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'committee_id':
                        (str,),
                    'election_full':
                        (bool,),
                    'sort':
                        (str, none_type,),
                    'candidate_id':
                        ([str],),
                    'state':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'per_page':
                        (int,),
                    'district':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'cycle':
                        ([int],),
                    'page':
                        (int,),
                    'sort_null_only':
                        (bool,),
                    'office':
                        (str,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'committee_id': 'committee_id',
                    'election_full': 'election_full',
                    'sort': 'sort',
                    'candidate_id': 'candidate_id',
                    'state': 'state',
                    'sort_hide_null': 'sort_hide_null',
                    'per_page': 'per_page',
                    'district': 'district',
                    'sort_nulls_last': 'sort_nulls_last',
                    'cycle': 'cycle',
                    'page': 'page',
                    'sort_null_only': 'sort_null_only',
                    'office': 'office',
                },
                'location_map': {
                    'api_key': 'query',
                    'committee_id': 'path',
                    'election_full': 'query',
                    'sort': 'query',
                    'candidate_id': 'query',
                    'state': 'query',
                    'sort_hide_null': 'query',
                    'per_page': 'query',
                    'district': 'query',
                    'sort_nulls_last': 'query',
                    'cycle': 'query',
                    'page': 'query',
                    'sort_null_only': 'query',
                    'office': 'query',
                },
                'collection_format_map': {
                    'candidate_id': 'multi',
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__committee_committee_id_electioneering_by_candidate_get
        )

        def __electioneering_aggregates_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """electioneering_aggregates_get  # noqa: E501

            Electioneering communications costs aggregates  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.electioneering_aggregates_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort (str, none_type): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of 'null'
                candidate_id ([str]):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                committee_id ([str]):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                electioneering_by_candidate_page.ElectioneeringByCandidatePage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.electioneering_aggregates_get = Endpoint(
            settings={
                'response_type': (electioneering_by_candidate_page.ElectioneeringByCandidatePage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/electioneering/aggregates/',
                'operation_id': 'electioneering_aggregates_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'sort',
                    'candidate_id',
                    'sort_hide_null',
                    'per_page',
                    'sort_nulls_last',
                    'committee_id',
                    'cycle',
                    'page',
                    'sort_null_only',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'sort':
                        (str, none_type,),
                    'candidate_id':
                        ([str],),
                    'sort_hide_null':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort_nulls_last':
                        (bool,),
                    'committee_id':
                        ([str],),
                    'cycle':
                        ([int],),
                    'page':
                        (int,),
                    'sort_null_only':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'sort': 'sort',
                    'candidate_id': 'candidate_id',
                    'sort_hide_null': 'sort_hide_null',
                    'per_page': 'per_page',
                    'sort_nulls_last': 'sort_nulls_last',
                    'committee_id': 'committee_id',
                    'cycle': 'cycle',
                    'page': 'page',
                    'sort_null_only': 'sort_null_only',
                },
                'location_map': {
                    'api_key': 'query',
                    'sort': 'query',
                    'candidate_id': 'query',
                    'sort_hide_null': 'query',
                    'per_page': 'query',
                    'sort_nulls_last': 'query',
                    'committee_id': 'query',
                    'cycle': 'query',
                    'page': 'query',
                    'sort_null_only': 'query',
                },
                'collection_format_map': {
                    'candidate_id': 'multi',
                    'committee_id': 'multi',
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__electioneering_aggregates_get
        )

        def __electioneering_by_candidate_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """electioneering_by_candidate_get  # noqa: E501

            Electioneering costs aggregated by candidate  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.electioneering_by_candidate_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                election_full (bool): &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle.. [optional] if omitted the server will use the default value of True
                sort (str, none_type): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of 'null'
                candidate_id ([str]):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                state (str): US state or territory where a candidate runs for office. [optional]
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                district (str): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                office (str): Federal office candidate runs for: H, S or P. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                electioneering_by_candidate_page.ElectioneeringByCandidatePage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.electioneering_by_candidate_get = Endpoint(
            settings={
                'response_type': (electioneering_by_candidate_page.ElectioneeringByCandidatePage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/electioneering/by_candidate/',
                'operation_id': 'electioneering_by_candidate_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'election_full',
                    'sort',
                    'candidate_id',
                    'state',
                    'sort_hide_null',
                    'per_page',
                    'district',
                    'sort_nulls_last',
                    'cycle',
                    'page',
                    'sort_null_only',
                    'office',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('office',): {

                        'HOUSE': 'house',
                        'SENATE': 'senate',
                        'PRESIDENT': 'president'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'election_full':
                        (bool,),
                    'sort':
                        (str, none_type,),
                    'candidate_id':
                        ([str],),
                    'state':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'per_page':
                        (int,),
                    'district':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'cycle':
                        ([int],),
                    'page':
                        (int,),
                    'sort_null_only':
                        (bool,),
                    'office':
                        (str,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'election_full': 'election_full',
                    'sort': 'sort',
                    'candidate_id': 'candidate_id',
                    'state': 'state',
                    'sort_hide_null': 'sort_hide_null',
                    'per_page': 'per_page',
                    'district': 'district',
                    'sort_nulls_last': 'sort_nulls_last',
                    'cycle': 'cycle',
                    'page': 'page',
                    'sort_null_only': 'sort_null_only',
                    'office': 'office',
                },
                'location_map': {
                    'api_key': 'query',
                    'election_full': 'query',
                    'sort': 'query',
                    'candidate_id': 'query',
                    'state': 'query',
                    'sort_hide_null': 'query',
                    'per_page': 'query',
                    'district': 'query',
                    'sort_nulls_last': 'query',
                    'cycle': 'query',
                    'page': 'query',
                    'sort_null_only': 'query',
                    'office': 'query',
                },
                'collection_format_map': {
                    'candidate_id': 'multi',
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__electioneering_by_candidate_get
        )

        def __electioneering_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """electioneering_get  # noqa: E501

             An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.electioneering_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                report_year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                sort (str, none_type): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of 'null'
                candidate_id ([str]):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                description (str): [optional]
                min_date (date): Minimum disbursement date. [optional]
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                committee_id ([str]):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                min_amount (str): Filter for all amounts greater than a value.. [optional]
                max_amount (str): Filter for all amounts less than a value.. [optional]
                last_index (int, none_type): Index of last result from previous page. [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                max_date (date): Maximum disbursement date. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                electioneering_page.ElectioneeringPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.electioneering_get = Endpoint(
            settings={
                'response_type': (electioneering_page.ElectioneeringPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/electioneering/',
                'operation_id': 'electioneering_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'report_year',
                    'sort',
                    'candidate_id',
                    'description',
                    'min_date',
                    'per_page',
                    'sort_hide_null',
                    'sort_nulls_last',
                    'committee_id',
                    'page',
                    'min_amount',
                    'max_amount',
                    'last_index',
                    'sort_null_only',
                    'max_date',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                    'last_index',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'report_year':
                        ([int],),
                    'sort':
                        (str, none_type,),
                    'candidate_id':
                        ([str],),
                    'description':
                        (str,),
                    'min_date':
                        (date,),
                    'per_page':
                        (int,),
                    'sort_hide_null':
                        (bool,),
                    'sort_nulls_last':
                        (bool,),
                    'committee_id':
                        ([str],),
                    'page':
                        (int,),
                    'min_amount':
                        (str,),
                    'max_amount':
                        (str,),
                    'last_index':
                        (int, none_type,),
                    'sort_null_only':
                        (bool,),
                    'max_date':
                        (date,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'report_year': 'report_year',
                    'sort': 'sort',
                    'candidate_id': 'candidate_id',
                    'description': 'description',
                    'min_date': 'min_date',
                    'per_page': 'per_page',
                    'sort_hide_null': 'sort_hide_null',
                    'sort_nulls_last': 'sort_nulls_last',
                    'committee_id': 'committee_id',
                    'page': 'page',
                    'min_amount': 'min_amount',
                    'max_amount': 'max_amount',
                    'last_index': 'last_index',
                    'sort_null_only': 'sort_null_only',
                    'max_date': 'max_date',
                },
                'location_map': {
                    'api_key': 'query',
                    'report_year': 'query',
                    'sort': 'query',
                    'candidate_id': 'query',
                    'description': 'query',
                    'min_date': 'query',
                    'per_page': 'query',
                    'sort_hide_null': 'query',
                    'sort_nulls_last': 'query',
                    'committee_id': 'query',
                    'page': 'query',
                    'min_amount': 'query',
                    'max_amount': 'query',
                    'last_index': 'query',
                    'sort_null_only': 'query',
                    'max_date': 'query',
                },
                'collection_format_map': {
                    'report_year': 'multi',
                    'candidate_id': 'multi',
                    'committee_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__electioneering_get
        )

        def __electioneering_totals_by_candidate_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """electioneering_totals_by_candidate_get  # noqa: E501

             Total electioneering communications spent on candidates by cycle or candidate election year   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.electioneering_totals_by_candidate_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                election_full (bool): &#x60;True&#x60; indicates that full election period of a candidate. &#x60;False&#x60; indicates that two year election cycle.. [optional] if omitted the server will use the default value of True
                sort (str, none_type): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of 'null'
                candidate_id ([str]):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                ec_totals_by_candidate_page.ECTotalsByCandidatePage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.electioneering_totals_by_candidate_get = Endpoint(
            settings={
                'response_type': (ec_totals_by_candidate_page.ECTotalsByCandidatePage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/electioneering/totals/by_candidate/',
                'operation_id': 'electioneering_totals_by_candidate_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'election_full',
                    'sort',
                    'candidate_id',
                    'sort_hide_null',
                    'per_page',
                    'sort_nulls_last',
                    'cycle',
                    'page',
                    'sort_null_only',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'election_full':
                        (bool,),
                    'sort':
                        (str, none_type,),
                    'candidate_id':
                        ([str],),
                    'sort_hide_null':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort_nulls_last':
                        (bool,),
                    'cycle':
                        ([int],),
                    'page':
                        (int,),
                    'sort_null_only':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'election_full': 'election_full',
                    'sort': 'sort',
                    'candidate_id': 'candidate_id',
                    'sort_hide_null': 'sort_hide_null',
                    'per_page': 'per_page',
                    'sort_nulls_last': 'sort_nulls_last',
                    'cycle': 'cycle',
                    'page': 'page',
                    'sort_null_only': 'sort_null_only',
                },
                'location_map': {
                    'api_key': 'query',
                    'election_full': 'query',
                    'sort': 'query',
                    'candidate_id': 'query',
                    'sort_hide_null': 'query',
                    'per_page': 'query',
                    'sort_nulls_last': 'query',
                    'cycle': 'query',
                    'page': 'query',
                    'sort_null_only': 'query',
                },
                'collection_format_map': {
                    'candidate_id': 'multi',
                    'cycle': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__electioneering_totals_by_candidate_get
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    'Invalid host index. Must be 0 <= index < %s' %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    ' to method `%s`' %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    'Value may not be None for non-nullable parameter `%s`'
                    ' when calling `%s`' %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    'Missing the required parameter `%s` when calling '
                    '`%s`' % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
