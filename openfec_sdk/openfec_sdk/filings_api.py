# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openfec_sdk.api_client import ApiClient
from openfec_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)
from openfec_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from openfec_sdk.models import filings_page
from openfec_sdk.models import operations_log_page


class FilingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __candidate_candidate_id_filings_get(
            self,
            candidate_id,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """candidate_candidate_id_filings_get  # noqa: E501

             All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.candidate_candidate_id_filings_get(candidate_id, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                candidate_id (str):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                amendment_indicator ([str]): Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. . [optional]
                is_amended (bool):  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. . [optional]
                most_recent (bool):  Report is either new or is the most-recently filed amendment . [optional]
                form_type ([str]): The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information . [optional]
                request_type ([str]): Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                min_receipt_date (date):  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                beginning_image_number ([str]):  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. . [optional]
                district ([str]): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                state ([str]): US state or territory where a candidate runs for office. [optional]
                report_year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                file_number ([int]): Filing ID number. [optional]
                document_type ([str]):  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice . [optional]
                report_type ([str]): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]
                primary_general_indicator ([str]):  Primary, general or special election indicator. . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["-receipt_date"]
                max_receipt_date (date):  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                filer_type (str): The method used to file with the FEC, either electronic or on paper.. [optional]
                form_category ([str]):  The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ . [optional]
                party ([str]): Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.. [optional]
                committee_type (str): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                office ([str]): Federal office candidate runs for: H, S or P. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                filings_page.FilingsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['candidate_id'] = \
                candidate_id
            return self.call_with_http_info(**kwargs)

        self.candidate_candidate_id_filings_get = Endpoint(
            settings={
                'response_type': (filings_page.FilingsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/candidate/{candidate_id}/filings/',
                'operation_id': 'candidate_candidate_id_filings_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'candidate_id',
                    'sort_hide_null',
                    'amendment_indicator',
                    'is_amended',
                    'most_recent',
                    'form_type',
                    'request_type',
                    'page',
                    'min_receipt_date',
                    'beginning_image_number',
                    'district',
                    'state',
                    'report_year',
                    'cycle',
                    'file_number',
                    'document_type',
                    'report_type',
                    'primary_general_indicator',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'max_receipt_date',
                    'filer_type',
                    'form_category',
                    'party',
                    'committee_type',
                    'sort_nulls_last',
                    'office',
                ],
                'required': [
                    'api_key',
                    'candidate_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'amendment_indicator',
                    'filer_type',
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('amendment_indicator',): {

                        'EMPTY': '',
                        'N': 'N',
                        'A': 'A',
                        'T': 'T',
                        'C': 'C',
                        'M': 'M',
                        'S': 'S'
                    },
                    ('filer_type',): {

                        'E-FILE': 'e-file',
                        'PAPER': 'paper'
                    },
                    ('office',): {

                        'EMPTY': '',
                        'H': 'H',
                        'S': 'S',
                        'P': 'P'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'candidate_id':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'amendment_indicator':
                        ([str],),
                    'is_amended':
                        (bool,),
                    'most_recent':
                        (bool,),
                    'form_type':
                        ([str],),
                    'request_type':
                        ([str],),
                    'page':
                        (int,),
                    'min_receipt_date':
                        (date,),
                    'beginning_image_number':
                        ([str],),
                    'district':
                        ([str],),
                    'state':
                        ([str],),
                    'report_year':
                        ([int],),
                    'cycle':
                        ([int],),
                    'file_number':
                        ([int],),
                    'document_type':
                        ([str],),
                    'report_type':
                        ([str],),
                    'primary_general_indicator':
                        ([str],),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        ([str], none_type,),
                    'max_receipt_date':
                        (date,),
                    'filer_type':
                        (str,),
                    'form_category':
                        ([str],),
                    'party':
                        ([str],),
                    'committee_type':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'office':
                        ([str],),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'candidate_id': 'candidate_id',
                    'sort_hide_null': 'sort_hide_null',
                    'amendment_indicator': 'amendment_indicator',
                    'is_amended': 'is_amended',
                    'most_recent': 'most_recent',
                    'form_type': 'form_type',
                    'request_type': 'request_type',
                    'page': 'page',
                    'min_receipt_date': 'min_receipt_date',
                    'beginning_image_number': 'beginning_image_number',
                    'district': 'district',
                    'state': 'state',
                    'report_year': 'report_year',
                    'cycle': 'cycle',
                    'file_number': 'file_number',
                    'document_type': 'document_type',
                    'report_type': 'report_type',
                    'primary_general_indicator': 'primary_general_indicator',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'max_receipt_date': 'max_receipt_date',
                    'filer_type': 'filer_type',
                    'form_category': 'form_category',
                    'party': 'party',
                    'committee_type': 'committee_type',
                    'sort_nulls_last': 'sort_nulls_last',
                    'office': 'office',
                },
                'location_map': {
                    'api_key': 'query',
                    'candidate_id': 'path',
                    'sort_hide_null': 'query',
                    'amendment_indicator': 'query',
                    'is_amended': 'query',
                    'most_recent': 'query',
                    'form_type': 'query',
                    'request_type': 'query',
                    'page': 'query',
                    'min_receipt_date': 'query',
                    'beginning_image_number': 'query',
                    'district': 'query',
                    'state': 'query',
                    'report_year': 'query',
                    'cycle': 'query',
                    'file_number': 'query',
                    'document_type': 'query',
                    'report_type': 'query',
                    'primary_general_indicator': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'max_receipt_date': 'query',
                    'filer_type': 'query',
                    'form_category': 'query',
                    'party': 'query',
                    'committee_type': 'query',
                    'sort_nulls_last': 'query',
                    'office': 'query',
                },
                'collection_format_map': {
                    'amendment_indicator': 'multi',
                    'form_type': 'multi',
                    'request_type': 'multi',
                    'beginning_image_number': 'multi',
                    'district': 'multi',
                    'state': 'multi',
                    'report_year': 'multi',
                    'cycle': 'multi',
                    'file_number': 'multi',
                    'document_type': 'multi',
                    'report_type': 'multi',
                    'primary_general_indicator': 'multi',
                    'sort': 'multi',
                    'form_category': 'multi',
                    'party': 'multi',
                    'office': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__candidate_candidate_id_filings_get
        )

        def __committee_committee_id_filings_get(
            self,
            committee_id,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """committee_committee_id_filings_get  # noqa: E501

             All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.committee_committee_id_filings_get(committee_id, api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                committee_id (str):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits.
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                amendment_indicator ([str]): Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. . [optional]
                is_amended (bool):  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. . [optional]
                most_recent (bool):  Report is either new or is the most-recently filed amendment . [optional]
                form_type ([str]): The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information . [optional]
                request_type ([str]): Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                min_receipt_date (date):  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                beginning_image_number ([str]):  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. . [optional]
                district ([str]): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                state ([str]): US state or territory where a candidate runs for office. [optional]
                report_year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                file_number ([int]): Filing ID number. [optional]
                document_type ([str]):  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice . [optional]
                report_type ([str]): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]
                primary_general_indicator ([str]):  Primary, general or special election indicator. . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["-receipt_date"]
                max_receipt_date (date):  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                filer_type (str): The method used to file with the FEC, either electronic or on paper.. [optional]
                form_category ([str]):  The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ . [optional]
                party ([str]): Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.. [optional]
                committee_type (str): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                office ([str]): Federal office candidate runs for: H, S or P. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                filings_page.FilingsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            kwargs['committee_id'] = \
                committee_id
            return self.call_with_http_info(**kwargs)

        self.committee_committee_id_filings_get = Endpoint(
            settings={
                'response_type': (filings_page.FilingsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/committee/{committee_id}/filings/',
                'operation_id': 'committee_committee_id_filings_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'committee_id',
                    'sort_hide_null',
                    'amendment_indicator',
                    'is_amended',
                    'most_recent',
                    'form_type',
                    'request_type',
                    'page',
                    'min_receipt_date',
                    'beginning_image_number',
                    'district',
                    'state',
                    'report_year',
                    'cycle',
                    'file_number',
                    'document_type',
                    'report_type',
                    'primary_general_indicator',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'max_receipt_date',
                    'filer_type',
                    'form_category',
                    'party',
                    'committee_type',
                    'sort_nulls_last',
                    'office',
                ],
                'required': [
                    'api_key',
                    'committee_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'amendment_indicator',
                    'filer_type',
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('amendment_indicator',): {

                        'EMPTY': '',
                        'N': 'N',
                        'A': 'A',
                        'T': 'T',
                        'C': 'C',
                        'M': 'M',
                        'S': 'S'
                    },
                    ('filer_type',): {

                        'E-FILE': 'e-file',
                        'PAPER': 'paper'
                    },
                    ('office',): {

                        'EMPTY': '',
                        'H': 'H',
                        'S': 'S',
                        'P': 'P'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'committee_id':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'amendment_indicator':
                        ([str],),
                    'is_amended':
                        (bool,),
                    'most_recent':
                        (bool,),
                    'form_type':
                        ([str],),
                    'request_type':
                        ([str],),
                    'page':
                        (int,),
                    'min_receipt_date':
                        (date,),
                    'beginning_image_number':
                        ([str],),
                    'district':
                        ([str],),
                    'state':
                        ([str],),
                    'report_year':
                        ([int],),
                    'cycle':
                        ([int],),
                    'file_number':
                        ([int],),
                    'document_type':
                        ([str],),
                    'report_type':
                        ([str],),
                    'primary_general_indicator':
                        ([str],),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        ([str], none_type,),
                    'max_receipt_date':
                        (date,),
                    'filer_type':
                        (str,),
                    'form_category':
                        ([str],),
                    'party':
                        ([str],),
                    'committee_type':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'office':
                        ([str],),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'committee_id': 'committee_id',
                    'sort_hide_null': 'sort_hide_null',
                    'amendment_indicator': 'amendment_indicator',
                    'is_amended': 'is_amended',
                    'most_recent': 'most_recent',
                    'form_type': 'form_type',
                    'request_type': 'request_type',
                    'page': 'page',
                    'min_receipt_date': 'min_receipt_date',
                    'beginning_image_number': 'beginning_image_number',
                    'district': 'district',
                    'state': 'state',
                    'report_year': 'report_year',
                    'cycle': 'cycle',
                    'file_number': 'file_number',
                    'document_type': 'document_type',
                    'report_type': 'report_type',
                    'primary_general_indicator': 'primary_general_indicator',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'max_receipt_date': 'max_receipt_date',
                    'filer_type': 'filer_type',
                    'form_category': 'form_category',
                    'party': 'party',
                    'committee_type': 'committee_type',
                    'sort_nulls_last': 'sort_nulls_last',
                    'office': 'office',
                },
                'location_map': {
                    'api_key': 'query',
                    'committee_id': 'path',
                    'sort_hide_null': 'query',
                    'amendment_indicator': 'query',
                    'is_amended': 'query',
                    'most_recent': 'query',
                    'form_type': 'query',
                    'request_type': 'query',
                    'page': 'query',
                    'min_receipt_date': 'query',
                    'beginning_image_number': 'query',
                    'district': 'query',
                    'state': 'query',
                    'report_year': 'query',
                    'cycle': 'query',
                    'file_number': 'query',
                    'document_type': 'query',
                    'report_type': 'query',
                    'primary_general_indicator': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'max_receipt_date': 'query',
                    'filer_type': 'query',
                    'form_category': 'query',
                    'party': 'query',
                    'committee_type': 'query',
                    'sort_nulls_last': 'query',
                    'office': 'query',
                },
                'collection_format_map': {
                    'amendment_indicator': 'multi',
                    'form_type': 'multi',
                    'request_type': 'multi',
                    'beginning_image_number': 'multi',
                    'district': 'multi',
                    'state': 'multi',
                    'report_year': 'multi',
                    'cycle': 'multi',
                    'file_number': 'multi',
                    'document_type': 'multi',
                    'report_type': 'multi',
                    'primary_general_indicator': 'multi',
                    'sort': 'multi',
                    'form_category': 'multi',
                    'party': 'multi',
                    'office': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__committee_committee_id_filings_get
        )

        def __filings_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """filings_get  # noqa: E501

             All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.filings_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                amendment_indicator ([str]): Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. . [optional]
                is_amended (bool):  False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. . [optional]
                most_recent (bool):  Report is either new or is the most-recently filed amendment . [optional]
                form_type ([str]): The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information . [optional]
                committee_id ([str]):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. . [optional]
                candidate_id ([str]):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]
                request_type ([str]): Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                min_receipt_date (date):  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                beginning_image_number ([str]):  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. . [optional]
                district ([str]): Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.. [optional]
                state ([str]): US state or territory where a candidate runs for office. [optional]
                report_year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                cycle ([int]):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]
                file_number ([int]): Filing ID number. [optional]
                document_type ([str]):  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice . [optional]
                report_type ([str]): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]
                primary_general_indicator ([str]):  Primary, general or special election indicator. . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["-receipt_date"]
                max_receipt_date (date):  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                filer_type (str): The method used to file with the FEC, either electronic or on paper.. [optional]
                form_category ([str]):  The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ . [optional]
                party ([str]): Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.. [optional]
                committee_type (str): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                office ([str]): Federal office candidate runs for: H, S or P. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                filings_page.FilingsPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.filings_get = Endpoint(
            settings={
                'response_type': (filings_page.FilingsPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/filings/',
                'operation_id': 'filings_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'sort_hide_null',
                    'amendment_indicator',
                    'is_amended',
                    'most_recent',
                    'form_type',
                    'committee_id',
                    'candidate_id',
                    'request_type',
                    'page',
                    'min_receipt_date',
                    'beginning_image_number',
                    'district',
                    'state',
                    'report_year',
                    'cycle',
                    'file_number',
                    'document_type',
                    'report_type',
                    'primary_general_indicator',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'max_receipt_date',
                    'filer_type',
                    'form_category',
                    'party',
                    'committee_type',
                    'sort_nulls_last',
                    'office',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'amendment_indicator',
                    'filer_type',
                    'office',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('amendment_indicator',): {

                        'EMPTY': '',
                        'N': 'N',
                        'A': 'A',
                        'T': 'T',
                        'C': 'C',
                        'M': 'M',
                        'S': 'S'
                    },
                    ('filer_type',): {

                        'E-FILE': 'e-file',
                        'PAPER': 'paper'
                    },
                    ('office',): {

                        'EMPTY': '',
                        'H': 'H',
                        'S': 'S',
                        'P': 'P'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'amendment_indicator':
                        ([str],),
                    'is_amended':
                        (bool,),
                    'most_recent':
                        (bool,),
                    'form_type':
                        ([str],),
                    'committee_id':
                        ([str],),
                    'candidate_id':
                        ([str],),
                    'request_type':
                        ([str],),
                    'page':
                        (int,),
                    'min_receipt_date':
                        (date,),
                    'beginning_image_number':
                        ([str],),
                    'district':
                        ([str],),
                    'state':
                        ([str],),
                    'report_year':
                        ([int],),
                    'cycle':
                        ([int],),
                    'file_number':
                        ([int],),
                    'document_type':
                        ([str],),
                    'report_type':
                        ([str],),
                    'primary_general_indicator':
                        ([str],),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        ([str], none_type,),
                    'max_receipt_date':
                        (date,),
                    'filer_type':
                        (str,),
                    'form_category':
                        ([str],),
                    'party':
                        ([str],),
                    'committee_type':
                        (str,),
                    'sort_nulls_last':
                        (bool,),
                    'office':
                        ([str],),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'sort_hide_null': 'sort_hide_null',
                    'amendment_indicator': 'amendment_indicator',
                    'is_amended': 'is_amended',
                    'most_recent': 'most_recent',
                    'form_type': 'form_type',
                    'committee_id': 'committee_id',
                    'candidate_id': 'candidate_id',
                    'request_type': 'request_type',
                    'page': 'page',
                    'min_receipt_date': 'min_receipt_date',
                    'beginning_image_number': 'beginning_image_number',
                    'district': 'district',
                    'state': 'state',
                    'report_year': 'report_year',
                    'cycle': 'cycle',
                    'file_number': 'file_number',
                    'document_type': 'document_type',
                    'report_type': 'report_type',
                    'primary_general_indicator': 'primary_general_indicator',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'max_receipt_date': 'max_receipt_date',
                    'filer_type': 'filer_type',
                    'form_category': 'form_category',
                    'party': 'party',
                    'committee_type': 'committee_type',
                    'sort_nulls_last': 'sort_nulls_last',
                    'office': 'office',
                },
                'location_map': {
                    'api_key': 'query',
                    'sort_hide_null': 'query',
                    'amendment_indicator': 'query',
                    'is_amended': 'query',
                    'most_recent': 'query',
                    'form_type': 'query',
                    'committee_id': 'query',
                    'candidate_id': 'query',
                    'request_type': 'query',
                    'page': 'query',
                    'min_receipt_date': 'query',
                    'beginning_image_number': 'query',
                    'district': 'query',
                    'state': 'query',
                    'report_year': 'query',
                    'cycle': 'query',
                    'file_number': 'query',
                    'document_type': 'query',
                    'report_type': 'query',
                    'primary_general_indicator': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'max_receipt_date': 'query',
                    'filer_type': 'query',
                    'form_category': 'query',
                    'party': 'query',
                    'committee_type': 'query',
                    'sort_nulls_last': 'query',
                    'office': 'query',
                },
                'collection_format_map': {
                    'amendment_indicator': 'multi',
                    'form_type': 'multi',
                    'committee_id': 'multi',
                    'candidate_id': 'multi',
                    'request_type': 'multi',
                    'beginning_image_number': 'multi',
                    'district': 'multi',
                    'state': 'multi',
                    'report_year': 'multi',
                    'cycle': 'multi',
                    'file_number': 'multi',
                    'document_type': 'multi',
                    'report_type': 'multi',
                    'primary_general_indicator': 'multi',
                    'sort': 'multi',
                    'form_category': 'multi',
                    'party': 'multi',
                    'office': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__filings_get
        )

        def __operations_log_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """operations_log_get  # noqa: E501

             The Operations log contains details of each report loaded into the database. It is primarily used as status check to determine when all of the data processes, from initial entry through review are complete.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.operations_log_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                min_coverage_end_date (date):  Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                status_num ([str]):  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. . [optional]
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                amendment_indicator ([str]): Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. . [optional]
                min_transaction_data_complete_date (date):  Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                max_coverage_end_date (date):  Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                max_transaction_data_complete_date (date):  Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                form_type ([str]): The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                min_receipt_date (date):  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                beginning_image_number ([str]):  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. . [optional]
                report_year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                report_type ([str]): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]
                candidate_committee_id ([str]):  A unique identifier of the registered filer. . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort ([str], none_type): Provide a field to sort by. Use - for descending order.. [optional] if omitted the server will use the default value of ["-report_year"]
                max_receipt_date (date):  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                operations_log_page.OperationsLogPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.operations_log_get = Endpoint(
            settings={
                'response_type': (operations_log_page.OperationsLogPage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/operations-log/',
                'operation_id': 'operations_log_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'min_coverage_end_date',
                    'status_num',
                    'sort_hide_null',
                    'amendment_indicator',
                    'min_transaction_data_complete_date',
                    'max_coverage_end_date',
                    'max_transaction_data_complete_date',
                    'form_type',
                    'page',
                    'min_receipt_date',
                    'beginning_image_number',
                    'report_year',
                    'report_type',
                    'candidate_committee_id',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'max_receipt_date',
                    'sort_nulls_last',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'status_num',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status_num',): {

                        '0': '0',
                        '1': '1'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'min_coverage_end_date':
                        (date,),
                    'status_num':
                        ([str],),
                    'sort_hide_null':
                        (bool,),
                    'amendment_indicator':
                        ([str],),
                    'min_transaction_data_complete_date':
                        (date,),
                    'max_coverage_end_date':
                        (date,),
                    'max_transaction_data_complete_date':
                        (date,),
                    'form_type':
                        ([str],),
                    'page':
                        (int,),
                    'min_receipt_date':
                        (date,),
                    'beginning_image_number':
                        ([str],),
                    'report_year':
                        ([int],),
                    'report_type':
                        ([str],),
                    'candidate_committee_id':
                        ([str],),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        ([str], none_type,),
                    'max_receipt_date':
                        (date,),
                    'sort_nulls_last':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'min_coverage_end_date': 'min_coverage_end_date',
                    'status_num': 'status_num',
                    'sort_hide_null': 'sort_hide_null',
                    'amendment_indicator': 'amendment_indicator',
                    'min_transaction_data_complete_date': 'min_transaction_data_complete_date',
                    'max_coverage_end_date': 'max_coverage_end_date',
                    'max_transaction_data_complete_date': 'max_transaction_data_complete_date',
                    'form_type': 'form_type',
                    'page': 'page',
                    'min_receipt_date': 'min_receipt_date',
                    'beginning_image_number': 'beginning_image_number',
                    'report_year': 'report_year',
                    'report_type': 'report_type',
                    'candidate_committee_id': 'candidate_committee_id',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'max_receipt_date': 'max_receipt_date',
                    'sort_nulls_last': 'sort_nulls_last',
                },
                'location_map': {
                    'api_key': 'query',
                    'min_coverage_end_date': 'query',
                    'status_num': 'query',
                    'sort_hide_null': 'query',
                    'amendment_indicator': 'query',
                    'min_transaction_data_complete_date': 'query',
                    'max_coverage_end_date': 'query',
                    'max_transaction_data_complete_date': 'query',
                    'form_type': 'query',
                    'page': 'query',
                    'min_receipt_date': 'query',
                    'beginning_image_number': 'query',
                    'report_year': 'query',
                    'report_type': 'query',
                    'candidate_committee_id': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'max_receipt_date': 'query',
                    'sort_nulls_last': 'query',
                },
                'collection_format_map': {
                    'status_num': 'multi',
                    'amendment_indicator': 'multi',
                    'form_type': 'multi',
                    'beginning_image_number': 'multi',
                    'report_year': 'multi',
                    'report_type': 'multi',
                    'candidate_committee_id': 'multi',
                    'sort': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__operations_log_get
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    'Invalid host index. Must be 0 <= index < %s' %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    ' to method `%s`' %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    'Value may not be None for non-nullable parameter `%s`'
                    ' when calling `%s`' %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    'Missing the required parameter `%s` when calling '
                    '`%s`' % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
