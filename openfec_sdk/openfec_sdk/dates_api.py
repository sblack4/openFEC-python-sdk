# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openfec_sdk.api_client import ApiClient
from openfec_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)
from openfec_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types
)
from openfec_sdk.models import calendar_date_page
from openfec_sdk.models import inline_response_default
from openfec_sdk.models import inline_response_default2


class DatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __calendar_dates_export_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """calendar_dates_export_get  # noqa: E501

             Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.    # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.calendar_dates_export_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                summary ([str]): Longer description of event. [optional]
                min_end_date (date):  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                max_start_date (date):  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-start_date'
                description ([str]): Brief description of event. [optional]
                max_end_date (date):  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                event_id (int): An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.. [optional]
                renderer (str): [optional] if omitted the server will use the default value of 'ics'
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                calendar_category_id ([int]):  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 . [optional]
                min_start_date (date):  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                calendar_date_page.CalendarDatePage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.calendar_dates_export_get = Endpoint(
            settings={
                'response_type': (calendar_date_page.CalendarDatePage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/calendar-dates/export/',
                'operation_id': 'calendar_dates_export_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'sort_hide_null',
                    'summary',
                    'min_end_date',
                    'max_start_date',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'description',
                    'max_end_date',
                    'event_id',
                    'renderer',
                    'page',
                    'calendar_category_id',
                    'min_start_date',
                    'sort_nulls_last',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                ],
                'enum': [
                    'renderer',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('renderer',): {

                        'ICS': 'ics',
                        'CSV': 'csv'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'summary':
                        ([str],),
                    'min_end_date':
                        (date,),
                    'max_start_date':
                        (date,),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        (str,),
                    'description':
                        ([str],),
                    'max_end_date':
                        (date,),
                    'event_id':
                        (int,),
                    'renderer':
                        (str,),
                    'page':
                        (int,),
                    'calendar_category_id':
                        ([int],),
                    'min_start_date':
                        (date,),
                    'sort_nulls_last':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'sort_hide_null': 'sort_hide_null',
                    'summary': 'summary',
                    'min_end_date': 'min_end_date',
                    'max_start_date': 'max_start_date',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'description': 'description',
                    'max_end_date': 'max_end_date',
                    'event_id': 'event_id',
                    'renderer': 'renderer',
                    'page': 'page',
                    'calendar_category_id': 'calendar_category_id',
                    'min_start_date': 'min_start_date',
                    'sort_nulls_last': 'sort_nulls_last',
                },
                'location_map': {
                    'api_key': 'query',
                    'sort_hide_null': 'query',
                    'summary': 'query',
                    'min_end_date': 'query',
                    'max_start_date': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'description': 'query',
                    'max_end_date': 'query',
                    'event_id': 'query',
                    'renderer': 'query',
                    'page': 'query',
                    'calendar_category_id': 'query',
                    'min_start_date': 'query',
                    'sort_nulls_last': 'query',
                },
                'collection_format_map': {
                    'summary': 'multi',
                    'description': 'multi',
                    'calendar_category_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__calendar_dates_export_get
        )

        def __calendar_dates_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """calendar_dates_get  # noqa: E501

             Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.calendar_dates_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                min_end_date (date):  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                summary ([str]): Longer description of event. [optional]
                max_start_date (date):  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-start_date'
                description ([str]): Brief description of event. [optional]
                max_end_date (date):  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                event_id (int): An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.. [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                calendar_category_id ([int]):  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 . [optional]
                min_start_date (date):  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                calendar_date_page.CalendarDatePage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.calendar_dates_get = Endpoint(
            settings={
                'response_type': (calendar_date_page.CalendarDatePage,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/calendar-dates/',
                'operation_id': 'calendar_dates_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'sort_hide_null',
                    'min_end_date',
                    'summary',
                    'max_start_date',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'description',
                    'max_end_date',
                    'event_id',
                    'page',
                    'calendar_category_id',
                    'min_start_date',
                    'sort_nulls_last',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'min_end_date':
                        (date,),
                    'summary':
                        ([str],),
                    'max_start_date':
                        (date,),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        (str,),
                    'description':
                        ([str],),
                    'max_end_date':
                        (date,),
                    'event_id':
                        (int,),
                    'page':
                        (int,),
                    'calendar_category_id':
                        ([int],),
                    'min_start_date':
                        (date,),
                    'sort_nulls_last':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'sort_hide_null': 'sort_hide_null',
                    'min_end_date': 'min_end_date',
                    'summary': 'summary',
                    'max_start_date': 'max_start_date',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'description': 'description',
                    'max_end_date': 'max_end_date',
                    'event_id': 'event_id',
                    'page': 'page',
                    'calendar_category_id': 'calendar_category_id',
                    'min_start_date': 'min_start_date',
                    'sort_nulls_last': 'sort_nulls_last',
                },
                'location_map': {
                    'api_key': 'query',
                    'sort_hide_null': 'query',
                    'min_end_date': 'query',
                    'summary': 'query',
                    'max_start_date': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'description': 'query',
                    'max_end_date': 'query',
                    'event_id': 'query',
                    'page': 'query',
                    'calendar_category_id': 'query',
                    'min_start_date': 'query',
                    'sort_nulls_last': 'query',
                },
                'collection_format_map': {
                    'summary': 'multi',
                    'description': 'multi',
                    'calendar_category_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__calendar_dates_get
        )

        def __election_dates_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """election_dates_get  # noqa: E501

             FEC election dates since 1995.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.election_dates_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                min_create_date (date):  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                min_election_date (date):  The minimum date of election. . [optional]
                election_state ([str]):  State or territory of the office sought. . [optional]
                min_primary_general_date (date):  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                max_election_date (date):  The maximum date of election. . [optional]
                max_primary_general_date (date):  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                max_create_date (date):  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                min_update_date (date):  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                election_year ([str]): Year of election. [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                election_party ([str]):  Party, if applicable. . [optional]
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-election_date'
                office_sought ([str]):  House, Senate or presidential office. . [optional]
                election_district ([str]):  House district of the office sought, if applicable. . [optional]
                election_type_id ([str]):  Election type id . [optional]
                max_update_date (date):  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                inline_response_default.InlineResponseDefault
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.election_dates_get = Endpoint(
            settings={
                'response_type': (inline_response_default.InlineResponseDefault,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/election-dates/',
                'operation_id': 'election_dates_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'sort_hide_null',
                    'min_create_date',
                    'min_election_date',
                    'election_state',
                    'min_primary_general_date',
                    'page',
                    'max_election_date',
                    'max_primary_general_date',
                    'max_create_date',
                    'min_update_date',
                    'election_year',
                    'sort_null_only',
                    'election_party',
                    'per_page',
                    'sort',
                    'office_sought',
                    'election_district',
                    'election_type_id',
                    'max_update_date',
                    'sort_nulls_last',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                ],
                'enum': [
                    'office_sought',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('office_sought',): {

                        'H': 'H',
                        'S': 'S',
                        'P': 'P'
                    },
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'sort_hide_null':
                        (bool,),
                    'min_create_date':
                        (date,),
                    'min_election_date':
                        (date,),
                    'election_state':
                        ([str],),
                    'min_primary_general_date':
                        (date,),
                    'page':
                        (int,),
                    'max_election_date':
                        (date,),
                    'max_primary_general_date':
                        (date,),
                    'max_create_date':
                        (date,),
                    'min_update_date':
                        (date,),
                    'election_year':
                        ([str],),
                    'sort_null_only':
                        (bool,),
                    'election_party':
                        ([str],),
                    'per_page':
                        (int,),
                    'sort':
                        (str,),
                    'office_sought':
                        ([str],),
                    'election_district':
                        ([str],),
                    'election_type_id':
                        ([str],),
                    'max_update_date':
                        (date,),
                    'sort_nulls_last':
                        (bool,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'sort_hide_null': 'sort_hide_null',
                    'min_create_date': 'min_create_date',
                    'min_election_date': 'min_election_date',
                    'election_state': 'election_state',
                    'min_primary_general_date': 'min_primary_general_date',
                    'page': 'page',
                    'max_election_date': 'max_election_date',
                    'max_primary_general_date': 'max_primary_general_date',
                    'max_create_date': 'max_create_date',
                    'min_update_date': 'min_update_date',
                    'election_year': 'election_year',
                    'sort_null_only': 'sort_null_only',
                    'election_party': 'election_party',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'office_sought': 'office_sought',
                    'election_district': 'election_district',
                    'election_type_id': 'election_type_id',
                    'max_update_date': 'max_update_date',
                    'sort_nulls_last': 'sort_nulls_last',
                },
                'location_map': {
                    'api_key': 'query',
                    'sort_hide_null': 'query',
                    'min_create_date': 'query',
                    'min_election_date': 'query',
                    'election_state': 'query',
                    'min_primary_general_date': 'query',
                    'page': 'query',
                    'max_election_date': 'query',
                    'max_primary_general_date': 'query',
                    'max_create_date': 'query',
                    'min_update_date': 'query',
                    'election_year': 'query',
                    'sort_null_only': 'query',
                    'election_party': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'office_sought': 'query',
                    'election_district': 'query',
                    'election_type_id': 'query',
                    'max_update_date': 'query',
                    'sort_nulls_last': 'query',
                },
                'collection_format_map': {
                    'election_state': 'multi',
                    'election_year': 'multi',
                    'election_party': 'multi',
                    'office_sought': 'multi',
                    'election_district': 'multi',
                    'election_type_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__election_dates_get
        )

        def __reporting_dates_get(
            self,
            api_key='DEMO_KEY',
            **kwargs
        ):
            """reporting_dates_get  # noqa: E501

             FEC election dates since 1995.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.reporting_dates_get(api_key='DEMO_KEY', async_req=True)
            >>> result = thread.get()

            Args:
                api_key (str):  API key for https://api.data.gov. Get one at https://api.data.gov/signup. . defaults to 'DEMO_KEY', must be one of ['DEMO_KEY']

            Keyword Args:
                min_create_date (date):  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                min_due_date (date):  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_hide_null (bool): Hide null values on sorted column(s).. [optional] if omitted the server will use the default value of False
                report_type ([str]): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]
                sort_null_only (bool): Toggle that filters out all rows having sort column that is non-null. [optional] if omitted the server will use the default value of False
                per_page (int): The number of results returned per page. Defaults to 20.. [optional] if omitted the server will use the default value of 20
                sort (str): Provide a field to sort by. Use &#x60;-&#x60; for descending order. . [optional] if omitted the server will use the default value of '-due_date'
                page (int): For paginating through results, starting at page 1. [optional] if omitted the server will use the default value of 1
                report_year ([int]):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]
                max_create_date (date):  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                max_due_date (date):  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                sort_nulls_last (bool): Toggle that sorts null values last. [optional] if omitted the server will use the default value of False
                max_update_date (date):  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                min_update_date (date):  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                inline_response_default2.InlineResponseDefault2
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index', 0)
            kwargs['api_key'] = \
                api_key
            return self.call_with_http_info(**kwargs)

        self.reporting_dates_get = Endpoint(
            settings={
                'response_type': (inline_response_default2.InlineResponseDefault2,),
                'auth': [
                    'ApiKeyHeaderAuth',
                    'ApiKeyQueryAuth',
                    'apiKey'
                ],
                'endpoint_path': '/reporting-dates/',
                'operation_id': 'reporting_dates_get',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'api_key',
                    'min_create_date',
                    'min_due_date',
                    'sort_hide_null',
                    'report_type',
                    'sort_null_only',
                    'per_page',
                    'sort',
                    'page',
                    'report_year',
                    'max_create_date',
                    'max_due_date',
                    'sort_nulls_last',
                    'max_update_date',
                    'min_update_date',
                ],
                'required': [
                    'api_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_key':
                        (str,),
                    'min_create_date':
                        (date,),
                    'min_due_date':
                        (date,),
                    'sort_hide_null':
                        (bool,),
                    'report_type':
                        ([str],),
                    'sort_null_only':
                        (bool,),
                    'per_page':
                        (int,),
                    'sort':
                        (str,),
                    'page':
                        (int,),
                    'report_year':
                        ([int],),
                    'max_create_date':
                        (date,),
                    'max_due_date':
                        (date,),
                    'sort_nulls_last':
                        (bool,),
                    'max_update_date':
                        (date,),
                    'min_update_date':
                        (date,),
                },
                'attribute_map': {
                    'api_key': 'api_key',
                    'min_create_date': 'min_create_date',
                    'min_due_date': 'min_due_date',
                    'sort_hide_null': 'sort_hide_null',
                    'report_type': 'report_type',
                    'sort_null_only': 'sort_null_only',
                    'per_page': 'per_page',
                    'sort': 'sort',
                    'page': 'page',
                    'report_year': 'report_year',
                    'max_create_date': 'max_create_date',
                    'max_due_date': 'max_due_date',
                    'sort_nulls_last': 'sort_nulls_last',
                    'max_update_date': 'max_update_date',
                    'min_update_date': 'min_update_date',
                },
                'location_map': {
                    'api_key': 'query',
                    'min_create_date': 'query',
                    'min_due_date': 'query',
                    'sort_hide_null': 'query',
                    'report_type': 'query',
                    'sort_null_only': 'query',
                    'per_page': 'query',
                    'sort': 'query',
                    'page': 'query',
                    'report_year': 'query',
                    'max_create_date': 'query',
                    'max_due_date': 'query',
                    'sort_nulls_last': 'query',
                    'max_update_date': 'query',
                    'min_update_date': 'query',
                },
                'collection_format_map': {
                    'report_type': 'multi',
                    'report_year': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reporting_dates_get
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only',
            '_check_input_type',
            '_check_return_type'
        ])
        self.params_map['nullable'].extend(['_request_timeout'])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        extra_types = {
            'async_req': (bool,),
            '_host_index': (int,),
            '_preload_content': (bool,),
            '_request_timeout': (none_type, int, (int,), [int]),
            '_return_http_data_only': (bool,),
            '_check_input_type': (bool,),
            '_check_return_type': (bool,)
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param]
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

        if kwargs['_check_input_type'] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs['_check_input_type'],
                configuration=self.api_client.configuration
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == (file_type,)):
                    params['file'][param_name] = [param_value]
                elif (param_location == 'form' and
                        self.openapi_types[param_name] == ([file_type],)):
                    # param_value is already a list
                    params['file'][param_name] = param_value
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings['servers'][kwargs['_host_index']]
        except IndexError:
            if self.settings['servers']:
                raise ApiValueError(
                    'Invalid host index. Must be 0 <= index < %s' %
                    len(self.settings['servers'])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    ' to method `%s`' %
                    (key, self.settings['operation_id'])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (key not in self.params_map['nullable'] and value is None
                    and kwargs['_check_input_type'] is False):
                raise ApiValueError(
                    'Value may not be None for non-nullable parameter `%s`'
                    ' when calling `%s`' %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    'Missing the required parameter `%s` when calling '
                    '`%s`' % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs['async_req'],
            _check_type=kwargs['_check_return_type'],
            _return_http_data_only=kwargs['_return_http_data_only'],
            _preload_content=kwargs['_preload_content'],
            _request_timeout=kwargs['_request_timeout'],
            _host=_host,
            collection_formats=params['collection_format'])
