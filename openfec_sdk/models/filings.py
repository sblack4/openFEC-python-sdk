# coding: utf-8

"""
    OpenFEC

    This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401
import nulltype  # noqa: F401

from openfec_sdk.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)


class Filings(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    @cached_property
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'amendment_chain': ([float], none_type,),  # noqa: E501
            'amendment_indicator': (str, none_type,),  # noqa: E501
            'amendment_version': (int, none_type,),  # noqa: E501
            'beginning_image_number': (str,),  # noqa: E501
            'candidate_id': (str, none_type,),  # noqa: E501
            'candidate_name': (str, none_type,),  # noqa: E501
            'cash_on_hand_beginning_period': (float, none_type,),  # noqa: E501
            'cash_on_hand_end_period': (float, none_type,),  # noqa: E501
            'committee_id': (str, none_type,),  # noqa: E501
            'committee_name': (str, none_type,),  # noqa: E501
            'committee_type': (str, none_type,),  # noqa: E501
            'coverage_end_date': (date, none_type,),  # noqa: E501
            'coverage_start_date': (date, none_type,),  # noqa: E501
            'csv_url': (str,),  # noqa: E501
            'cycle': (int, none_type,),  # noqa: E501
            'debts_owed_by_committee': (float, none_type,),  # noqa: E501
            'debts_owed_to_committee': (float, none_type,),  # noqa: E501
            'document_description': (str,),  # noqa: E501
            'document_type': (str, none_type,),  # noqa: E501
            'document_type_full': (str, none_type,),  # noqa: E501
            'election_year': (int, none_type,),  # noqa: E501
            'ending_image_number': (str,),  # noqa: E501
            'fec_file_id': (str,),  # noqa: E501
            'fec_url': (str,),  # noqa: E501
            'file_number': (int, none_type,),  # noqa: E501
            'form_category': (str, none_type,),  # noqa: E501
            'form_type': (str, none_type,),  # noqa: E501
            'house_personal_funds': (float, none_type,),  # noqa: E501
            'html_url': (str, none_type,),  # noqa: E501
            'is_amended': (bool, none_type,),  # noqa: E501
            'means_filed': (str, none_type,),  # noqa: E501
            'most_recent': (bool, none_type,),  # noqa: E501
            'most_recent_file_number': (int, none_type,),  # noqa: E501
            'net_donations': (float, none_type,),  # noqa: E501
            'office': (str, none_type,),  # noqa: E501
            'opposition_personal_funds': (float, none_type,),  # noqa: E501
            'pages': (int, none_type,),  # noqa: E501
            'party': (str, none_type,),  # noqa: E501
            'pdf_url': (str, none_type,),  # noqa: E501
            'previous_file_number': (int, none_type,),  # noqa: E501
            'primary_general_indicator': (str, none_type,),  # noqa: E501
            'receipt_date': (date, none_type,),  # noqa: E501
            'report_type': (str, none_type,),  # noqa: E501
            'report_type_full': (str, none_type,),  # noqa: E501
            'report_year': (int, none_type,),  # noqa: E501
            'request_type': (str, none_type,),  # noqa: E501
            'senate_personal_funds': (float, none_type,),  # noqa: E501
            'state': (str, none_type,),  # noqa: E501
            'sub_id': (str,),  # noqa: E501
            'total_communication_cost': (float, none_type,),  # noqa: E501
            'total_disbursements': (float, none_type,),  # noqa: E501
            'total_independent_expenditures': (float, none_type,),  # noqa: E501
            'total_individual_contributions': (float, none_type,),  # noqa: E501
            'total_receipts': (float, none_type,),  # noqa: E501
            'treasurer_name': (str, none_type,),  # noqa: E501
            'update_date': (date, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        'amendment_chain': 'amendment_chain',  # noqa: E501
        'amendment_indicator': 'amendment_indicator',  # noqa: E501
        'amendment_version': 'amendment_version',  # noqa: E501
        'beginning_image_number': 'beginning_image_number',  # noqa: E501
        'candidate_id': 'candidate_id',  # noqa: E501
        'candidate_name': 'candidate_name',  # noqa: E501
        'cash_on_hand_beginning_period': 'cash_on_hand_beginning_period',  # noqa: E501
        'cash_on_hand_end_period': 'cash_on_hand_end_period',  # noqa: E501
        'committee_id': 'committee_id',  # noqa: E501
        'committee_name': 'committee_name',  # noqa: E501
        'committee_type': 'committee_type',  # noqa: E501
        'coverage_end_date': 'coverage_end_date',  # noqa: E501
        'coverage_start_date': 'coverage_start_date',  # noqa: E501
        'csv_url': 'csv_url',  # noqa: E501
        'cycle': 'cycle',  # noqa: E501
        'debts_owed_by_committee': 'debts_owed_by_committee',  # noqa: E501
        'debts_owed_to_committee': 'debts_owed_to_committee',  # noqa: E501
        'document_description': 'document_description',  # noqa: E501
        'document_type': 'document_type',  # noqa: E501
        'document_type_full': 'document_type_full',  # noqa: E501
        'election_year': 'election_year',  # noqa: E501
        'ending_image_number': 'ending_image_number',  # noqa: E501
        'fec_file_id': 'fec_file_id',  # noqa: E501
        'fec_url': 'fec_url',  # noqa: E501
        'file_number': 'file_number',  # noqa: E501
        'form_category': 'form_category',  # noqa: E501
        'form_type': 'form_type',  # noqa: E501
        'house_personal_funds': 'house_personal_funds',  # noqa: E501
        'html_url': 'html_url',  # noqa: E501
        'is_amended': 'is_amended',  # noqa: E501
        'means_filed': 'means_filed',  # noqa: E501
        'most_recent': 'most_recent',  # noqa: E501
        'most_recent_file_number': 'most_recent_file_number',  # noqa: E501
        'net_donations': 'net_donations',  # noqa: E501
        'office': 'office',  # noqa: E501
        'opposition_personal_funds': 'opposition_personal_funds',  # noqa: E501
        'pages': 'pages',  # noqa: E501
        'party': 'party',  # noqa: E501
        'pdf_url': 'pdf_url',  # noqa: E501
        'previous_file_number': 'previous_file_number',  # noqa: E501
        'primary_general_indicator': 'primary_general_indicator',  # noqa: E501
        'receipt_date': 'receipt_date',  # noqa: E501
        'report_type': 'report_type',  # noqa: E501
        'report_type_full': 'report_type_full',  # noqa: E501
        'report_year': 'report_year',  # noqa: E501
        'request_type': 'request_type',  # noqa: E501
        'senate_personal_funds': 'senate_personal_funds',  # noqa: E501
        'state': 'state',  # noqa: E501
        'sub_id': 'sub_id',  # noqa: E501
        'total_communication_cost': 'total_communication_cost',  # noqa: E501
        'total_disbursements': 'total_disbursements',  # noqa: E501
        'total_independent_expenditures': 'total_independent_expenditures',  # noqa: E501
        'total_individual_contributions': 'total_individual_contributions',  # noqa: E501
        'total_receipts': 'total_receipts',  # noqa: E501
        'treasurer_name': 'treasurer_name',  # noqa: E501
        'update_date': 'update_date',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, _visited_composed_classes=(), **kwargs):  # noqa: E501
        """filings.Filings - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            amendment_chain ([float], none_type): [optional]  # noqa: E501
            amendment_indicator (str, none_type):  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed. . [optional]  # noqa: E501
            amendment_version (int, none_type): [optional]  # noqa: E501
            beginning_image_number (str): [optional]  # noqa: E501
            candidate_id (str, none_type):  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. . [optional]  # noqa: E501
            candidate_name (str, none_type): Name of candidate running for office. [optional]  # noqa: E501
            cash_on_hand_beginning_period (float, none_type): Balance for the committee at the start of the two-year period. [optional]  # noqa: E501
            cash_on_hand_end_period (float, none_type): Ending cash balance on the most recent filing. [optional]  # noqa: E501
            committee_id (str, none_type):  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id&#39;s begin with the letter C which is followed by eight digits. . [optional]  # noqa: E501
            committee_name (str, none_type): The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.. [optional]  # noqa: E501
            committee_type (str, none_type): The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account . [optional]  # noqa: E501
            coverage_end_date (date, none_type): Ending date of the reporting period. [optional]  # noqa: E501
            coverage_start_date (date, none_type): Beginning date of the reporting period. [optional]  # noqa: E501
            csv_url (str): [optional]  # noqa: E501
            cycle (int, none_type):  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. . [optional]  # noqa: E501
            debts_owed_by_committee (float, none_type): Debts owed by the committee. [optional]  # noqa: E501
            debts_owed_to_committee (float, none_type): Debts owed to the committee. [optional]  # noqa: E501
            document_description (str): [optional]  # noqa: E501
            document_type (str, none_type):  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice . [optional]  # noqa: E501
            document_type_full (str, none_type):  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice . [optional]  # noqa: E501
            election_year (int, none_type): Year of election. [optional]  # noqa: E501
            ending_image_number (str): [optional]  # noqa: E501
            fec_file_id (str): [optional]  # noqa: E501
            fec_url (str): [optional]  # noqa: E501
            file_number (int, none_type): [optional]  # noqa: E501
            form_category (str, none_type):  The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ . [optional]  # noqa: E501
            form_type (str, none_type): The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information . [optional]  # noqa: E501
            house_personal_funds (float, none_type): [optional]  # noqa: E501
            html_url (str, none_type):  HTML link to the filing. . [optional]  # noqa: E501
            is_amended (bool, none_type): [optional]  # noqa: E501
            means_filed (str, none_type): The method used to file with the FEC, either electronic or on paper.. [optional]  # noqa: E501
            most_recent (bool, none_type): [optional]  # noqa: E501
            most_recent_file_number (int, none_type): [optional]  # noqa: E501
            net_donations (float, none_type): [optional]  # noqa: E501
            office (str, none_type): Federal office candidate runs for: H, S or P. [optional]  # noqa: E501
            opposition_personal_funds (float, none_type): [optional]  # noqa: E501
            pages (int, none_type):  Number of pages in the document . [optional]  # noqa: E501
            party (str, none_type): Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.. [optional]  # noqa: E501
            pdf_url (str, none_type): [optional]  # noqa: E501
            previous_file_number (int, none_type): [optional]  # noqa: E501
            primary_general_indicator (str, none_type): [optional]  # noqa: E501
            receipt_date (date, none_type): Date the FEC received the electronic or paper record. [optional]  # noqa: E501
            report_type (str, none_type): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]  # noqa: E501
            report_type_full (str, none_type): Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) . [optional]  # noqa: E501
            report_year (int, none_type):  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. . [optional]  # noqa: E501
            request_type (str, none_type): [optional]  # noqa: E501
            senate_personal_funds (float, none_type): [optional]  # noqa: E501
            state (str, none_type): US state or territory where a candidate runs for office. [optional]  # noqa: E501
            sub_id (str): [optional]  # noqa: E501
            total_communication_cost (float, none_type): [optional]  # noqa: E501
            total_disbursements (float, none_type): [optional]  # noqa: E501
            total_independent_expenditures (float, none_type): [optional]  # noqa: E501
            total_individual_contributions (float, none_type): [optional]  # noqa: E501
            total_receipts (float, none_type): [optional]  # noqa: E501
            treasurer_name (str, none_type): Name of the Committee&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.. [optional]  # noqa: E501
            update_date (date, none_type): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in six.iteritems(kwargs):
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
